<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Interrupted - Clojure]]></title>
  <link href="http://guilespi.github.com/atom.xml" rel="self"/>
  <link href="http://guilespi.github.com/"/>
  <updated>2015-04-13T10:49:24-03:00</updated>
  <id>http://guilespi.github.com/</id>
  <author>
    <name><![CDATA[Guillermo Winkler]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Verifying state machine behavior using test.check]]></title>
    <link href="http://guilespi.github.com/blog/2015/04/12/verifying-state-machine-behavior-using-test-dot-check/"/>
    <updated>2015-04-12T17:21:00-03:00</updated>
    <id>http://guilespi.github.com/blog/2015/04/12/verifying-state-machine-behavior-using-test-dot-check</id>
    <content type="html"><![CDATA[<p>My <a href="http://guilespi.github.com/blog/2015/04/12/property-based-testing-using-quickcheck/">previous post</a> was an introduction to the motivations and benefits of a <code>property-based</code> testing approach.</p>

<p>I also mentioned the <a href="https://www.youtube.com/watch?v=zi0rHwfiX1Q">John Hughes</a> talk, which is great.</p>

<p>But there&#8217;s a catch.</p>

<p>Until now, we&#8217;ve been considering <code>property-based</code> testing in a <em>functional way</em>, where properties for functions depend only on the function input, assuming no <em>state</em> between function invocations.</p>

<p>But that&#8217;s not always the case, sometimes our function inserts data into some database, sends an email, or sends a message to the car anti-lock braking system.</p>

<p>The examples John mentions in his talk are not straightforward to solve without Erlang&#8217;s QuickCheck, since they&#8217;re verifying <em>state machines</em> behavior.</p>

<p>Since I&#8217;m a Clojurist, I was <a href="https://twitter.com/guilespi/status/566315813268111360">a little confused</a> about why I couldn&#8217;t find a way to do that state machine magic using <code>test.check</code>, so bugging Reid and not reading the fine manual was the evident answer.</p>

<p>Thing is, test.check has this strategy of composing generators, particularly using <code>bind</code> you can generate a value based on a previously generated value by another generator.</p>

<p>For instance, this example shows how to generate a <code>vector</code> and then select an element from it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">keyword-vector</span> <span class="p">(</span><span class="nf">gen/such-that</span> <span class="nv">not-empty</span> <span class="p">(</span><span class="nf">gen/vector</span> <span class="nv">gen/keyword</span><span class="p">)))</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">vec-and-elem</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">gen/bind</span> <span class="nv">keyword-vector</span>
</span><span class='line'>            <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">v</span><span class="p">]</span> <span class="p">(</span><span class="nf">gen/tuple</span> <span class="p">(</span><span class="nf">gen/elements</span> <span class="nv">v</span><span class="p">)</span> <span class="p">(</span><span class="nf">gen/return</span> <span class="nv">v</span><span class="p">)))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">gen/sample</span> <span class="nv">vec-and-elem</span> <span class="mi">4</span><span class="p">)</span>
</span><span class='line'><span class="c1">;; =&gt; ([:va [:va :b4]] [:Zu1 [:w :Zu1]] [:2 [:2]] [:27X [:27X :KW]])</span>
</span></code></pre></td></tr></table></div></figure>


<p>But it doesn&#8217;t have a declarative or simple way to model expected system state.</p>

<h2>What is state?</h2>

<p>First thing we should think about is, when we do have state? Opposed to a situation when we&#8217;re testing a <a href="http://en.wikipedia.org/wiki/Referential_transparency_%28computer_science%29">referentially transparent</a> function.</p>

<p>The function <code>sort</code> from the previous post is referentially transparent, since for the same input vector, always return the same sorted output.</p>

<p>But what happens when we have a situation like the one described in the talk about this circular buffer?</p>

<p><img class="center" src="http://guilespi.github.com/images/blog/circularbuffer.png" width="680" height="780" title="'Circular Buffer'" ></p>

<p>If you want to test the behavior of the <code>put</code> and <code>remove</code> API calls, it depends on the <em>state</em> of the system, meaning what elements you already have on your buffer.</p>

<p>The properties <code>put</code> must comply with, depend on the system state.</p>

<p>So you have this slide from John&#8217;s presentation:</p>

<p><img class="center" src="http://guilespi.github.com/images/blog/fsmmodel.png" width="680" height="780" title="'API Modelling state'" ></p>

<p>With the strategy proposed by QuickCheck to model this testing problem:</p>

<ul>
<li>API under test is seen as a sequence of commands.</li>
<li>Model the state of the system you expect after each command execution.</li>
<li>Execute the commands and validate the system state is what you expect it to be.</li>
</ul>


<p>So we need to generate a <code>sequence</code> of commands and validate system state, instead of generating input for a single function.</p>

<p>This situation is more common than you may think, even if you&#8217;re doing functional programming state is everywhere, you have state on your databases and you also have state on your UI.</p>

<p>You would never think about <code>deleting an email</code>, and after than <code>sending the email</code>, that&#8217;s an invalid generated sequence of commands(relative to the &#8220;email composing state&#8221;).</p>

<p>This last example is exactly the one described by <a href="https://www.youtube.com/watch?v=HXGpBrmR70U">Ashton Kemerling</a> from Pivotal, they&#8217;re using <code>test.check</code> to randomly generate test scenarios for the UI. And because test.check doesn&#8217;t have the <em>finite state machine modeling thing</em>, they ended up generating impossible or invalid action sequences, and having to discard them as <code>NO-OPs</code> when run.</p>

<h2>FSM Behavior</h2>

<p>The problem with Ashton&#8217;s approach for my situation, was that I had this possibly long sequence of commands or transactions, where each transaction modifies the state of the system, so the last one probable makes no sense at all without some of the <em>in-the-middle</em> ocurring transactions.</p>

<p>The problem is not only discarding invalid sequences, but how to generate something valid <em>at all</em>.</p>

<p>Say you have 3 possible actions:</p>

<ul>
<li>add <code>[id, name]</code></li>
<li>edit <code>[id, name]</code></li>
<li>delete <code>[id]</code></li>
</ul>


<p>If the command sequence you generate is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">[{</span><span class="ss">:type</span> <span class="ss">:add</span> <span class="ss">:name</span> <span class="s">&quot;John&quot;</span> <span class="ss">:id</span> <span class="mi">1</span><span class="p">}</span>
</span><span class='line'> <span class="p">{</span><span class="ss">:type</span> <span class="ss">:add</span> <span class="ss">:name</span> <span class="s">&quot;Ted&quot;</span> <span class="ss">:id</span> <span class="mi">84</span><span class="p">}</span>
</span><span class='line'> <span class="p">{</span><span class="ss">:type</span> <span class="ss">:delete</span> <span class="ss">:id</span> <span class="mi">1</span><span class="p">}]</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>delete</code> action depends on two things:</p>

<ol>
<li>Someone to be already added (as in the circular buffer described above).</li>
<li>Selecting a valid <code>id</code> for deletion from the ones already added.</li>
</ol>


<p>It looks like something you would do using <code>bind</code>, but there&#8217;s something more, there&#8217;s a <code>state</code> that changes when each transaction is applied, and affects each potential command that may be generated afterwards.</p>

<p>Searching around, I found a document titled <a href="http://www.diva-portal.org/smash/get/diva2:343744/FULLTEXT01.pdf">Verifying Finite State Machine Behavior Using QuickCheck Eqc_fsm</a> by Ida Lindgren and Robin Malmros, it&#8217;s an evaluation from <em>Uppsala Universitet</em> to understand whether QuickCheck is suitable for testing mobile telephone communications with base transceiver stations.</p>

<p>Besides the evaluation itself which is worth reading, there&#8217;s a chapter on Finite State Machines I used as guide to implement something similar with <code>test.check</code>.</p>

<h2>The Command protocol</h2>

<p>There&#8217;s a nice diagram in the paper representing the Erlang&#8217;s finite state machine flow</p>

<p><img class="center" src="http://guilespi.github.com/images/blog/fsmflow.png" width="680" height="780" title="'QuickCheck FSM Flow'" ></p>

<p>We observe a few things:</p>

<ul>
<li>You have a set of possible commands to generate.</li>
<li>Each command has a precondition to check validity against current state.</li>
<li>Each command affects state in some way, generating a new-state.</li>
</ul>


<p>Translating that ideas into Clojure we can model a command protocol</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defprotocol </span><span class="nv">Command</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">precondition</span> <span class="p">[</span><span class="nv">this</span> <span class="nv">state</span><span class="p">]</span> <span class="s">&quot;Returns true if command can be applied in current system state&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">exec</span> <span class="p">[</span><span class="nv">this</span> <span class="nv">state</span> <span class="nv">cmd</span><span class="p">]</span> <span class="s">&quot;Applies generated command to the specified system state, returns new state&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">generate</span> <span class="p">[</span><span class="nv">this</span> <span class="nv">state</span><span class="p">]</span> <span class="s">&quot;Generates command given the current system state, returns command generator&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>So far, we&#8217;ve assumed nothing about:</p>

<ul>
<li>How state is going to be modeled.</li>
<li>What structure each generated command has.</li>
</ul>


<p><strong>Since we&#8217;re using <code>test.check</code> we need a particular protocol function <code>generate</code> returning the command generator.</strong></p>

<h2>A Command generator</h2>

<p>Having a protocol, lets define our <code>add</code>, <code>edit</code> and <code>delete</code> transactions.</p>

<p>Questions to answer are:</p>

<ol>
<li>What will our model of the world look like?</li>
<li>What&#8217;s the initial and expected states after applying each transaction?</li>
</ol>


<p>Our expected state will be something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">{</span><span class="ss">:people</span> <span class="p">[{</span><span class="ss">:name</span> <span class="s">&quot;John&quot;</span> <span class="ss">:id</span> <span class="mi">1</span><span class="p">}</span>
</span><span class='line'>          <span class="p">{</span><span class="ss">:name</span> <span class="s">&quot;Ted&quot;</span> <span class="ss">:id</span> <span class="mi">84</span><span class="p">}</span>
</span><span class='line'>          <span class="p">{</span><span class="ss">:name</span> <span class="s">&quot;Tess&quot;</span> <span class="ss">:id</span> <span class="mi">22</span><span class="p">}]}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>So our <code>add</code> transaction will be:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">add-cmd</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">reify</span>
</span><span class='line'>    <span class="nv">Command</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">precondition</span> <span class="p">[</span><span class="nv">_</span> <span class="nv">state</span><span class="p">]</span>
</span><span class='line'>      <span class="p">(</span><span class="nb">vector? </span><span class="p">(</span><span class="ss">:people</span> <span class="nv">state</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">(</span><span class="nf">exec</span> <span class="p">[</span><span class="nv">_</span> <span class="nv">state</span> <span class="nv">cmd</span><span class="p">]</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">update-in</span> <span class="nv">state</span> <span class="p">[</span><span class="ss">:people</span><span class="p">]</span> <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">people</span><span class="p">]</span>
</span><span class='line'>                                   <span class="p">(</span><span class="nb">conj </span><span class="nv">people</span>
</span><span class='line'>                                         <span class="p">(</span><span class="nb">dissoc </span><span class="nv">cmd</span> <span class="ss">:type</span><span class="p">)))))</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">generate</span> <span class="p">[</span><span class="nv">_</span> <span class="nv">state</span><span class="p">]</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">gen/fmap</span> <span class="p">(</span><span class="nb">partial zipmap </span><span class="p">[</span><span class="ss">:type</span> <span class="ss">:name</span> <span class="ss">:id</span><span class="p">])</span>
</span><span class='line'>                <span class="p">(</span><span class="nf">gen/tuple</span> <span class="p">(</span><span class="nf">gen/return</span> <span class="ss">:add</span><span class="p">)</span>
</span><span class='line'>                           <span class="p">(</span><span class="nf">gen/not-empty</span> <span class="nv">gen/string-alphanumeric</span><span class="p">)</span>
</span><span class='line'>                           <span class="nv">gen/int</span><span class="p">))))))</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>The highlights:</p>

<ul>
<li>Our only precondition is to have a vector to <code>conj</code> the transaction into.</li>
<li>The <code>generate</code> function returns a standard <code>test.check</code> generator for the command.</li>
<li>The <code>exec</code> function applies the generated command to the current system state and returns a new state.</li>
</ul>


<p>Now, what&#8217;s interesting is the <code>delete</code> transaction:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">delete-cmd</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">reify</span>
</span><span class='line'>    <span class="nv">Command</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">precondition</span> <span class="p">[</span><span class="nv">_</span> <span class="nv">state</span><span class="p">]</span>
</span><span class='line'>      <span class="p">(</span><span class="nb">seq </span><span class="p">(</span><span class="ss">:people</span> <span class="nv">state</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">(</span><span class="nf">exec</span> <span class="p">[</span><span class="nv">_</span> <span class="nv">state</span> <span class="nv">cmd</span><span class="p">]</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">update-in</span> <span class="nv">state</span> <span class="p">[</span><span class="ss">:people</span><span class="p">]</span> <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">people</span><span class="p">]</span>
</span><span class='line'>                                   <span class="p">(</span><span class="nf">vec</span> <span class="p">(</span><span class="nb">filter </span><span class="o">#</span><span class="p">(</span><span class="nb">not= </span><span class="p">(</span><span class="ss">:id</span> <span class="nv">%</span><span class="p">)</span>
</span><span class='line'>                                                       <span class="p">(</span><span class="ss">:id</span> <span class="nv">cmd</span><span class="p">))</span>
</span><span class='line'>                                                <span class="nv">people</span><span class="p">)))))</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">(</span><span class="nf">generate</span> <span class="p">[</span><span class="nv">_</span> <span class="nv">state</span><span class="p">]</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">gen/fmap</span> <span class="p">(</span><span class="nb">partial zipmap </span><span class="p">[</span><span class="ss">:type</span> <span class="ss">:id</span><span class="p">])</span>
</span><span class='line'>                <span class="p">(</span><span class="nf">gen/tuple</span> <span class="p">(</span><span class="nf">gen/return</span> <span class="ss">:delete</span><span class="p">)</span>
</span><span class='line'>                           <span class="p">(</span><span class="nf">gen/elements</span> <span class="p">(</span><span class="nf">mapv</span> <span class="ss">:id</span> <span class="p">(</span><span class="ss">:people</span> <span class="nv">state</span><span class="p">))))))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note the differences:</p>

<ul>
<li><code>delete</code> can only be executed if the people list actually has <em>someone</em> inside</li>
<li>The generator selects to delete an <code>id</code> from the people in the current state (using <code>gen/elements</code> selector)</li>
<li>Applying the command implies removing the selected person from the next state.</li>
</ul>


<h2>Valid sequence generator</h2>

<p>So how do we generate a sequence of commands giving a command list?</p>

<p>This is a recursive approach, that receives the available commands and the sequence size to generate:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">command-seq</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">state</span> <span class="nv">commands</span> <span class="nv">size</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">gen/bind</span> <span class="p">(</span><span class="nf">gen/one-of</span> <span class="p">(</span><span class="nf">-&gt;&gt;</span> <span class="p">(</span><span class="nb">map second </span><span class="nv">commands</span><span class="p">)</span>
</span><span class='line'>                             <span class="p">(</span><span class="nb">filter </span><span class="o">#</span><span class="p">(</span><span class="nf">precondition</span> <span class="nv">%</span> <span class="nv">state</span><span class="p">))</span>
</span><span class='line'>                             <span class="p">(</span><span class="nb">map </span><span class="o">#</span><span class="p">(</span><span class="nf">generate</span> <span class="nv">%</span> <span class="nv">state</span><span class="p">))))</span>
</span><span class='line'>            <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">cmd</span><span class="p">]</span>
</span><span class='line'>              <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">zero? </span><span class="nv">size</span><span class="p">)</span>
</span><span class='line'>                <span class="p">(</span><span class="nf">gen/return</span> <span class="p">[</span><span class="nv">cmd</span><span class="p">])</span>
</span><span class='line'>                <span class="p">(</span><span class="nf">gen/fmap</span>
</span><span class='line'>                 <span class="p">(</span><span class="nb">partial concat </span><span class="p">[</span><span class="nv">cmd</span><span class="p">])</span>
</span><span class='line'>                 <span class="p">(</span><span class="nf">command-seq</span> <span class="p">(</span><span class="nf">exec</span> <span class="p">(</span><span class="nb">get </span><span class="nv">commands</span> <span class="p">(</span><span class="ss">:type</span> <span class="nv">cmd</span><span class="p">))</span> <span class="nv">state</span> <span class="nv">cmd</span><span class="p">)</span>
</span><span class='line'>                              <span class="nv">commands</span>
</span><span class='line'>                              <span class="p">(</span><span class="nb">dec </span><span class="nv">size</span><span class="p">)))))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The important parts being:</p>

<ul>
<li>Selects only one valid command to generate with <code>one-of</code> after filtering preconditions.</li>
<li>If command sequence size is <code>0</code> just finish, otherwise recursively concat the rest of the sequence.</li>
<li>The new state is updated in the step <code>(exec (get commands (:type cmd)) state cmd)</code>, where we need to retrieve the original command object.</li>
</ul>


<p>If you would like to generate random sequence sizes, just bind it with <code>gen/choose</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">gen/bind</span> <span class="p">(</span><span class="nf">gen/choose</span> <span class="mi">0</span> <span class="mi">10</span><span class="p">)</span>
</span><span class='line'>          <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">num-elements</span><span class="p">]</span>
</span><span class='line'>            <span class="p">(</span><span class="nf">command-seq</span> <span class="p">{</span><span class="ss">:people</span> <span class="p">[]}</span>
</span><span class='line'>                         <span class="p">{</span><span class="ss">:add-cmd</span> <span class="nv">add-cmd</span>
</span><span class='line'>                          <span class="ss">:delete-cmd</span> <span class="nv">delete-cmd</span><span class="p">}</span>
</span><span class='line'>                         <span class="nv">num-elements</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note the initial state is set to <code>{:people []}</code> for the <code>add</code> command precondition to succeed.</p>

<p>If we generate 3 samples now, it looks good, but there&#8217;s still a problem&#8230;.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(({</span><span class="ss">:id</span> <span class="mi">0</span>, <span class="ss">:name</span> <span class="s">&quot;C&quot;</span>, <span class="ss">:type</span> <span class="ss">:add-cmd</span><span class="p">}</span>
</span><span class='line'>  <span class="p">{</span><span class="ss">:id</span> <span class="mi">0</span>, <span class="ss">:name</span> <span class="s">&quot;2&quot;</span>, <span class="ss">:type</span> <span class="ss">:add-cmd</span><span class="p">}</span>
</span><span class='line'>  <span class="p">{</span><span class="ss">:id</span> <span class="mi">0</span>, <span class="ss">:name</span> <span class="s">&quot;xi&quot;</span>, <span class="ss">:type</span> <span class="ss">:add-cmd</span><span class="p">}</span>
</span><span class='line'>  <span class="p">{</span><span class="ss">:id</span> <span class="mi">0</span>, <span class="ss">:name</span> <span class="s">&quot;p&quot;</span>, <span class="ss">:type</span> <span class="ss">:add-cmd</span><span class="p">}</span>
</span><span class='line'>  <span class="p">{</span><span class="ss">:id</span> <span class="mi">0</span>, <span class="ss">:type</span> <span class="ss">:delete-cmd</span><span class="p">}</span>
</span><span class='line'>  <span class="p">{</span><span class="ss">:id</span> <span class="mi">0</span>, <span class="ss">:name</span> <span class="s">&quot;3Q&quot;</span>, <span class="ss">:type</span> <span class="ss">:add-cmd</span><span class="p">}</span>
</span><span class='line'>  <span class="p">{</span><span class="ss">:id</span> <span class="mi">0</span>, <span class="ss">:name</span> <span class="s">&quot;9&quot;</span>, <span class="ss">:type</span> <span class="ss">:add-cmd</span><span class="p">}</span>
</span><span class='line'>  <span class="p">{</span><span class="ss">:id</span> <span class="mi">0</span>, <span class="ss">:type</span> <span class="ss">:delete-cmd</span><span class="p">})</span>
</span><span class='line'> <span class="p">({</span><span class="ss">:id</span> <span class="mi">-1</span>, <span class="ss">:name</span> <span class="s">&quot;H&quot;</span>, <span class="ss">:type</span> <span class="ss">:add-cmd</span><span class="p">}</span>
</span><span class='line'>  <span class="p">{</span><span class="ss">:id</span> <span class="mi">-1</span>, <span class="ss">:type</span> <span class="ss">:delete-cmd</span><span class="p">}</span>
</span><span class='line'>  <span class="p">{</span><span class="ss">:id</span> <span class="mi">1</span>, <span class="ss">:name</span> <span class="s">&quot;q&quot;</span>, <span class="ss">:type</span> <span class="ss">:add-cmd</span><span class="p">}</span>
</span><span class='line'>  <span class="p">{</span><span class="ss">:id</span> <span class="mi">0</span>, <span class="ss">:name</span> <span class="s">&quot;F&quot;</span>, <span class="ss">:type</span> <span class="ss">:add-cmd</span><span class="p">}</span>
</span><span class='line'>  <span class="p">{</span><span class="ss">:id</span> <span class="mi">1</span>, <span class="ss">:type</span> <span class="ss">:delete-cmd</span><span class="p">})</span>
</span><span class='line'> <span class="p">({</span><span class="ss">:id</span> <span class="mi">-1</span>, <span class="ss">:name</span> <span class="s">&quot;fY&quot;</span>, <span class="ss">:type</span> <span class="ss">:add-cmd</span><span class="p">}</span>
</span><span class='line'>  <span class="p">{</span><span class="ss">:id</span> <span class="mi">0</span>, <span class="ss">:name</span> <span class="s">&quot;a&quot;</span>, <span class="ss">:type</span> <span class="ss">:add-cmd</span><span class="p">}</span>
</span><span class='line'>  <span class="p">{</span><span class="ss">:id</span> <span class="mi">-1</span>, <span class="ss">:type</span> <span class="ss">:delete-cmd</span><span class="p">}</span>
</span><span class='line'>  <span class="p">{</span><span class="ss">:id</span> <span class="mi">2</span>, <span class="ss">:name</span> <span class="s">&quot;u&quot;</span>, <span class="ss">:type</span> <span class="ss">:add-cmd</span><span class="p">}</span>
</span><span class='line'>  <span class="p">{</span><span class="ss">:id</span> <span class="mi">2</span>, <span class="ss">:type</span> <span class="ss">:delete-cmd</span><span class="p">}</span>
</span><span class='line'>  <span class="p">{</span><span class="ss">:id</span> <span class="mi">1</span>, <span class="ss">:name</span> <span class="s">&quot;7&quot;</span>, <span class="ss">:type</span> <span class="ss">:add-cmd</span><span class="p">}</span>
</span><span class='line'>  <span class="p">{</span><span class="ss">:id</span> <span class="mi">-1</span>, <span class="ss">:name</span> <span class="s">&quot;E&quot;</span>, <span class="ss">:type</span> <span class="ss">:add-cmd</span><span class="p">}</span>
</span><span class='line'>  <span class="p">{</span><span class="ss">:id</span> <span class="mi">1</span>, <span class="ss">:type</span> <span class="ss">:delete-cmd</span><span class="p">}</span>
</span><span class='line'>  <span class="p">{</span><span class="ss">:id</span> <span class="mi">0</span>, <span class="ss">:type</span> <span class="ss">:delete-cmd</span><span class="p">}</span>
</span><span class='line'>  <span class="p">{</span><span class="ss">:id</span> <span class="mi">-1</span>, <span class="ss">:type</span> <span class="ss">:delete-cmd</span><span class="p">}))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Each <code>add-cmd</code> is repeating the <code>id</code>, since it&#8217;s generating it without checking the current state, let&#8217;s change our <code>add</code> transaction generator</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">generate</span> <span class="p">[</span><span class="nv">_</span> <span class="nv">state</span><span class="p">]</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">gen/fmap</span> <span class="p">(</span><span class="nb">partial zipmap </span><span class="p">[</span><span class="ss">:type</span> <span class="ss">:name</span> <span class="ss">:id</span><span class="p">])</span>
</span><span class='line'>                    <span class="p">(</span><span class="nf">gen/tuple</span> <span class="p">(</span><span class="nf">gen/return</span> <span class="ss">:add-cmd</span><span class="p">)</span>
</span><span class='line'>                               <span class="p">(</span><span class="nf">gen/not-empty</span> <span class="nv">gen/string-alphanumeric</span><span class="p">)</span>
</span><span class='line'>                               <span class="p">(</span><span class="nf">gen/such-that</span> <span class="o">#</span><span class="p">(</span><span class="nb">-&gt; </span><span class="p">(</span><span class="nf">mapv</span> <span class="ss">:id</span> <span class="p">(</span><span class="ss">:people</span> <span class="nv">state</span><span class="p">))</span>
</span><span class='line'>                                                   <span class="p">(</span><span class="nb">contains? </span><span class="nv">%</span><span class="p">)</span>
</span><span class='line'>                                                   <span class="nv">not</span><span class="p">)</span>
</span><span class='line'>                                              <span class="nv">gen/int</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now the <code>id</code> field generator checks that the generated <code>int</code> doesn&#8217;t belong to the current ids in the state (we could have returned a <code>uuid</code> or something else, but it wouldn&#8217;t make the case for state-dependent generation)</p>

<p>To complete the example we need:</p>

<ul>
<li>To apply the commands to the system under test.</li>
<li>A way to retrieve the system state.</li>
<li>Comparing the final system state with our final generated expected state.</li>
</ul>


<p>Which is pretty straightforward, so we&#8217;ll talk about shrinking first.</p>

<h2>Shrinking the sequence</h2>

<p>If you were to found a failing command sequence using the code above, you would quickly realize it doesn&#8217;t shrink properly.</p>

<p>Since we&#8217;re generating the sequence composing <code>bind</code>, <code>fmap</code> and <code>concat</code> and not using the internal <code>gen/vector</code> or <code>gen/list</code> generators, the generated sequence doesn&#8217;t know how to shrink itself.</p>

<p>If you read <a href="http://reiddraper.com/writing-simple-check/">Reid&#8217;s account</a> on writing <code>test.check</code>, there&#8217;s a glimpse of the problem we face, shrinking depends on the generated data type. So a generated <code>int</code> knows how to shrink itself, which is different on how a <code>vector</code> shrinks itself.</p>

<p>If you combine existing generators, you get shrinking for free, but since we&#8217;re generating our sequence recursively with <code>concat</code> we&#8217;ve lost the <code>vector</code> type shrinking capability.</p>

<p>And there&#8217;s a good reason it is so, but let&#8217;s first see how shrinking works in <code>test.check</code>.</p>

<h3>Rose Trees</h3>

<p><code>test.check</code> complects the data generation step with the shrinking of that data. So when you generate some value, behind the scenes all the alternative shrinked scenarios are also generated.</p>

<p>Let&#8217;s sample an int vector generator:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">gen/sample</span> <span class="p">(</span><span class="nf">gen/not-empty</span> <span class="p">(</span><span class="nf">gen/vector</span> <span class="nv">gen/int</span><span class="p">))</span> <span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="nv">=&gt;</span> <span class="p">([</span><span class="mi">0</span><span class="p">]</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="p">[</span><span class="mi">-1</span> <span class="mi">1</span><span class="p">]</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">1</span> <span class="mi">-3</span><span class="p">]</span> <span class="p">[</span><span class="mi">2</span> <span class="mi">3</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>sample</code> function is hiding from you the alternatives and showing only the actual generated value.</p>

<p>But, if we call the generator using <code>call-gen</code>, we have a completely different structure:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">gen/call-gen</span> <span class="p">(</span><span class="nf">gen/not-empty</span> <span class="p">(</span><span class="nf">gen/vector</span> <span class="nv">gen/int</span><span class="p">))</span> <span class="p">(</span><span class="nf">gen/random</span><span class="p">)</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="nv">=&gt;</span> <span class="p">[[</span><span class="mi">1</span><span class="p">]</span> <span class="p">([[</span><span class="mi">0</span><span class="p">]</span> <span class="p">()])]</span>
</span></code></pre></td></tr></table></div></figure>


<p>What we have is a <a href="http://en.wikipedia.org/wiki/Rose_tree">rose tree</a>, which is a <code>n-ary</code> tree, where each tree node may have any number of childs.</p>

<p><code>test.check</code> uses a very simple modeling approach for the tree, in the form of <code>[parent childs]</code>.</p>

<p>So this tree</p>

<p><img class="center" src="http://guilespi.github.com/images/blog/rosetree.png" width="340" height="390" title="'Rose Tree'" ></p>

<p>Is represented as</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">[</span><span class="mi">1</span> <span class="p">[[</span><span class="mi">2</span> <span class="p">[]]</span>
</span><span class='line'>    <span class="p">[</span><span class="mi">3</span> <span class="p">[]]]]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Everytime you get a generated value, what you&#8217;re looking at is at the root of the tree obtained with <code>rose/root</code>, which is exactly what <code>gen/sample</code> is doing.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">require</span> <span class="o">&#39;</span><span class="p">[</span><span class="nv">clojure.test.check.rose-tree</span> <span class="ss">:as</span> <span class="nv">rose</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">rose/root</span> <span class="p">(</span><span class="nf">gen/call-gen</span> <span class="p">(</span><span class="nf">gen/not-empty</span> <span class="p">(</span><span class="nf">gen/vector</span> <span class="nv">gen/int</span><span class="p">))</span> <span class="p">(</span><span class="nf">gen/random</span><span class="p">)</span> <span class="mi">1</span><span class="p">))</span>
</span><span class='line'><span class="nv">=&gt;</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>The shrinking tree you would expect for a generated vector is:</p>

<p><img class="center" src="http://guilespi.github.com/images/blog/vectorshrinktree.png" width="680" height="780" title="'Vector rose tree'" ></p>

<p>The more deep inside the tree, the more shrunk the value is. So for instance <code>integers</code> shrink up to zero, and <code>vectors</code> randomly remove elements until nothing is left.</p>

<p><strong>If we were to actually look inside the shrunk vector tree, it would also include the shrunked integers, but you get the idea.</strong></p>

<h2>Shrinking a valid command sequence</h2>

<p>I said before our sequence doesn&#8217;t shrink since it&#8217;s generated recursively, so this is how our sequence tree looks like so far.</p>

<p><img class="center" src="http://guilespi.github.com/images/blog/singlenodecmdtree.png" width="340" height="390" title="'Single node command tree'" ></p>

<p>But even if we were using the vector shrinker we would end up with something like this:</p>

<p><img class="center" src="http://guilespi.github.com/images/blog/invalidcmdtree.png" width="680" height="780" title="'Invalid command tree'" ></p>

<p>Since the vector shrinker doesn&#8217;t really know what a valid command sequence looks like, it will just do a random permutation of commands, ending up with many invalid sequences (like <code>[{:add 1} {:delete 2}]</code>).</p>

<p>We will need a custom shrinker, that shrinks only valid command sequences, with a resulting tree like this one:</p>

<p><img class="center" src="http://guilespi.github.com/images/blog/validcmdtree.png" width="680" height="780" title="'Valid command tree'" ></p>

<p>To do that, we will modify our protocol to add a new function <code>postcondition</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defprotocol </span><span class="nv">Command</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">precondition</span> <span class="p">[</span><span class="nv">this</span> <span class="nv">state</span><span class="p">]</span> <span class="s">&quot;Returns true if command can be applied in current system state&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">exec</span> <span class="p">[</span><span class="nv">this</span> <span class="nv">state</span> <span class="nv">cmd</span><span class="p">]</span> <span class="s">&quot;Applies generated command to the specified system state, returns new state&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">generate</span> <span class="p">[</span><span class="nv">this</span> <span class="nv">state</span><span class="p">]</span> <span class="s">&quot;Generates command given the current system state, returns command generator&quot;</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">postcondition</span> <span class="p">[</span><span class="nv">this</span> <span class="nv">state</span> <span class="nv">cmd</span><span class="p">]</span> <span class="s">&quot;Returns true if cmd can be applied on specified state&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>postcondition</code> will be called while shrinking, in order to validate if a shirking sequence is valid for the hipotetical state generated by the previous commands.</p>

<p>Another important function is <code>gen/pure</code>, which allows to return our custom rose tree as generator result.</p>

<p>So this is how our command generator looks like now:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">cmd-seq</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">state</span> <span class="nv">commands</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">gen/bind</span> <span class="p">(</span><span class="nf">gen/choose</span> <span class="mi">0</span> <span class="mi">10</span><span class="p">)</span>
</span><span class='line'>            <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">num-elements</span><span class="p">]</span>
</span><span class='line'>              <span class="p">(</span><span class="nf">gen/bind</span> <span class="p">(</span><span class="nf">cmd-seq-helper</span> <span class="nv">state</span> <span class="nv">commands</span> <span class="nv">num-elements</span><span class="p">)</span>
</span><span class='line'>                        <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">cmd-seq</span><span class="p">]</span>
</span><span class='line'>                          <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">shrinked</span> <span class="p">(</span><span class="nf">shrink-sequence</span> <span class="p">(</span><span class="nf">mapv</span> <span class="nb">first </span><span class="nv">cmd-seq</span><span class="p">)</span>
</span><span class='line'>                                                          <span class="p">(</span><span class="nf">mapv</span> <span class="nb">second </span><span class="nv">cmd-seq</span><span class="p">))]</span>
</span><span class='line'>                            <span class="p">(</span><span class="nf">gen/gen-pure</span> <span class="nv">shrinked</span><span class="p">)))))))</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">cmd-seq-helper</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">state</span> <span class="nv">commands</span> <span class="nv">size</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">gen/bind</span> <span class="p">(</span><span class="nf">gen/one-of</span> <span class="p">(</span><span class="nf">-&gt;&gt;</span> <span class="p">(</span><span class="nb">map second </span><span class="nv">commands</span><span class="p">)</span>
</span><span class='line'>                             <span class="p">(</span><span class="nb">filter </span><span class="o">#</span><span class="p">(</span><span class="nf">precondition</span> <span class="nv">%</span> <span class="nv">state</span><span class="p">))</span>
</span><span class='line'>                             <span class="p">(</span><span class="nb">map </span><span class="o">#</span><span class="p">(</span><span class="nf">generate</span> <span class="nv">%</span> <span class="nv">state</span><span class="p">))))</span>
</span><span class='line'>            <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">cmd</span><span class="p">]</span>
</span><span class='line'>              <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">zero? </span><span class="nv">size</span><span class="p">)</span>
</span><span class='line'>                <span class="p">(</span><span class="nf">gen/return</span> <span class="p">[[</span><span class="nv">cmd</span> <span class="nv">state</span><span class="p">]])</span>
</span><span class='line'>                <span class="p">(</span><span class="nf">gen/fmap</span>
</span><span class='line'>                 <span class="p">(</span><span class="nb">partial concat </span><span class="p">[[</span><span class="nv">cmd</span> <span class="nv">state</span><span class="p">]])</span>
</span><span class='line'>                 <span class="p">(</span><span class="nf">cmd-seq-helper</span> <span class="p">(</span><span class="nf">exec</span> <span class="p">(</span><span class="nb">get </span><span class="nv">commands</span> <span class="p">(</span><span class="ss">:type</span> <span class="nv">cmd</span><span class="p">))</span> <span class="nv">state</span> <span class="nv">cmd</span><span class="p">)</span>
</span><span class='line'>                                 <span class="p">(</span><span class="nb">map second </span><span class="nv">commands</span><span class="p">)</span>
</span><span class='line'>                                 <span class="p">(</span><span class="nb">dec </span><span class="nv">size</span><span class="p">)))))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>We see two different things here:</p>

<ol>
<li>Generator also returns the state for that particular command.</li>
<li>There&#8217;s a call to <code>shrink-sequence</code> that generates the rose tree given the command sequence and intermediate states.</li>
</ol>


<p>The <code>shrink-sequence</code> function being:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">shrink-sequence</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">cmd-seq</span> <span class="nv">state-seq</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">letfn</span> <span class="p">[(</span><span class="nf">shrink-subseq</span> <span class="p">[</span><span class="nv">s</span><span class="p">]</span>
</span><span class='line'>            <span class="p">(</span><span class="nb">when </span><span class="p">(</span><span class="nb">seq </span><span class="nv">s</span><span class="p">)</span>
</span><span class='line'>              <span class="p">[(</span><span class="nb">map </span><span class="o">#</span><span class="p">(</span><span class="nb">get </span><span class="nv">cmd-seq</span> <span class="nv">%</span><span class="p">)</span> <span class="nv">s</span><span class="p">)</span>
</span><span class='line'>               <span class="p">(</span><span class="nf">-&gt;&gt;</span> <span class="p">(</span><span class="nf">remove-seq</span> <span class="nv">s</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">(</span><span class="nb">filter </span><span class="p">(</span><span class="nb">partial </span><span class="nv">valid-sequence?</span> <span class="nv">state-seq</span> <span class="nv">cmd-seq</span><span class="p">))</span>
</span><span class='line'>                    <span class="p">(</span><span class="nf">mapv</span> <span class="nv">shrink-subseq</span><span class="p">))]))]</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">shrink-subseq</span> <span class="p">(</span><span class="nb">range </span><span class="mi">0</span> <span class="p">(</span><span class="nb">count </span><span class="nv">cmd-seq</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Highlights:</p>

<ul>
<li>Returns a rose tree in the form <code>[parent childs]</code>.</li>
<li><code>remove-seq</code> generates a sequence of subsequences with only one element removed.</li>
<li><code>valid-sequence?</code> uses <code>postcondition</code> to validate the shrinked seq.</li>
<li>Recursively shrinks the shrunk childs until nothing&#8217;s left.</li>
</ul>


<h2>Putting all together</h2>

<p>I&#8217;ve put together a running sample for you to check out <a href="https://github.com/guilespi/fsm-test-check/blob/master/src/fsm_test_check/core.clj">here</a>.</p>

<p>There&#8217;s only one property defined: <em>applying all the generated transactions should return true</em>, but it fails when there are two delete commands present.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">apply-tx</span>
</span><span class='line'>  <span class="s">&quot;Apply transactions fails when there are two delete commands&quot;</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">tx-log</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">-&gt;&gt;</span> <span class="nv">tx-log</span>
</span><span class='line'>       <span class="p">(</span><span class="nb">filter </span><span class="o">#</span><span class="p">(</span><span class="nb">= </span><span class="ss">:delete-cmd</span> <span class="p">(</span><span class="ss">:type</span> <span class="nv">%</span><span class="p">)))</span>
</span><span class='line'>       <span class="nv">count</span>
</span><span class='line'>       <span class="p">(</span><span class="nb">&gt; </span><span class="mi">2</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">commands-consistent-apply</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">prop/for-all</span> <span class="p">[</span><span class="nv">tx-log</span> <span class="p">(</span><span class="nf">cmd-seq</span> <span class="p">{</span><span class="ss">:people</span> <span class="p">[]}</span> <span class="p">{</span><span class="ss">:add-cmd</span> <span class="nv">add-cmd</span> <span class="ss">:delete-cmd</span> <span class="nv">delete-cmd</span><span class="p">})]</span>
</span><span class='line'>                <span class="p">(</span><span class="nb">true? </span><span class="p">(</span><span class="nf">apply-tx</span> <span class="nv">tx-log</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">tc/quick-check</span> <span class="mi">10</span> <span class="nv">commands-consistent-apply</span><span class="p">)</span>
</span><span class='line'><span class="nv">=&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">{</span><span class="ss">:result</span> <span class="nv">false</span>, <span class="ss">:seed</span> <span class="mi">1428695347616</span>, <span class="ss">:failing-size</span> <span class="mi">7</span>, <span class="ss">:num-tests</span> <span class="mi">8</span>,
</span><span class='line'> <span class="ss">:fail</span> <span class="p">[({</span><span class="ss">:id</span> <span class="mi">6</span>, <span class="ss">:name</span> <span class="s">&quot;8&quot;</span>, <span class="ss">:type</span> <span class="ss">:add-cmd</span><span class="p">}</span>
</span><span class='line'>         <span class="p">{</span><span class="ss">:id</span> <span class="mi">-4</span>, <span class="ss">:name</span> <span class="s">&quot;KvoOq&quot;</span>, <span class="ss">:type</span> <span class="ss">:add-cmd</span><span class="p">}</span>
</span><span class='line'>         <span class="p">{</span><span class="ss">:id</span> <span class="mi">-6</span>, <span class="ss">:name</span> <span class="s">&quot;hWn&quot;</span>, <span class="ss">:type</span> <span class="ss">:add-cmd</span><span class="p">}</span>
</span><span class='line'>         <span class="p">{</span><span class="ss">:id</span> <span class="mi">6</span>, <span class="ss">:type</span> <span class="ss">:delete-cmd</span><span class="p">}</span>
</span><span class='line'>         <span class="p">{</span><span class="ss">:id</span> <span class="mi">-4</span>, <span class="ss">:type</span> <span class="ss">:delete-cmd</span><span class="p">})]</span>,
</span><span class='line'> <span class="ss">:shrunk</span> <span class="p">{</span><span class="ss">:total-nodes-visited</span> <span class="mi">55</span>, <span class="ss">:depth</span> <span class="mi">16</span>, <span class="ss">:result</span> <span class="nv">false</span>,
</span><span class='line'>          <span class="ss">:smallest</span> <span class="p">[({</span><span class="ss">:id</span> <span class="mi">0</span>, <span class="ss">:name</span> <span class="s">&quot;0&quot;</span>, <span class="ss">:type</span> <span class="ss">:add-cmd</span><span class="p">}</span>
</span><span class='line'>                      <span class="p">{</span><span class="ss">:id</span> <span class="mi">-2</span>, <span class="ss">:name</span> <span class="s">&quot;2&quot;</span>, <span class="ss">:type</span> <span class="ss">:add-cmd</span><span class="p">}</span>
</span><span class='line'>                      <span class="p">{</span><span class="ss">:id</span> <span class="mi">0</span>, <span class="ss">:type</span> <span class="ss">:delete-cmd</span><span class="p">}</span>
</span><span class='line'>                      <span class="p">{</span><span class="ss">:id</span> <span class="mi">-2</span>, <span class="ss">:type</span> <span class="ss">:delete-cmd</span><span class="p">})]}}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you look closely the failing test case has three <code>add</code> commands, but when shrunk only two needed in order to fail appear.</p>

<p>Have fun!</p>

<p>I&#8217;m <a href="https://twitter.com/guilespi">guilespi</a> on Twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Property-based testing using QuickCheck]]></title>
    <link href="http://guilespi.github.com/blog/2015/04/12/property-based-testing-using-quickcheck/"/>
    <updated>2015-04-12T17:05:00-03:00</updated>
    <id>http://guilespi.github.com/blog/2015/04/12/property-based-testing-using-quickcheck</id>
    <content type="html"><![CDATA[<p>Last year I attended <a href="https://www.youtube.com/playlist?list=PLZdCLR02grLp__wRg5OTavVj4wefg69hM">Clojure/West</a> in San Francisco, and was lucky enough to be at the talk by <a href="http://www.cse.chalmers.se/~rjmh/">John Hughes</a>, called <a href="https://www.youtube.com/watch?v=zi0rHwfiX1Q">Testing the hard stuff and staying sane</a>.</p>

<p>I had been previously exposed to some of the concepts of generative testing, particularly Haskell&#8217;s own QuickCheck, but never took the time to do something with it, this talk by John Hughes really stroke a chord on the usefulness of generative -or property based- testing, and how much effort you can save by knowing when and <em>how</em> to use it.</p>

<p>I&#8217;ve been using Clojure <code>test.check</code> for a while, and since I&#8217;m preparing a <a href="http://testing.uy">conference talk</a> on the subject, I decided to write something about it.</p>

<p>So bear with me, in this two-entry blog post I&#8217;ll try to convince you why down the road, it may save your ass too.</p>

<h2>What generative testing is not</h2>

<p>Probably the reason I&#8217;ve always looked down upon generative testing, was thinking it was just about random/junk data generation, for the too-lazy-to-think-your-own-test-cases kind of attitude.</p>

<p>Well, that&#8217;s <strong>not</strong> what generative testing is about.</p>

<p>You <em>will</em> have data generators for some input domain values, but trying to generate random noise to make the program fail is just <a href="http://en.wikipedia.org/wiki/Fuzz_testing">fuzzy testing</a>, and generative testing is more than that.</p>

<p>How?</p>

<h2>On Types vs. Tests</h2>

<p><a href="http://blog.guillermowinkler.com/blog/2012/11/14/neither-types-nor-tests-will-solve-your-data-coverage-problem/">I&#8217;ve written before</a> about the difficulty of using types to prove your program is correct. Some people will always say you can do it with type systems(and types even more complex than the program under proof), and you can <a href="https://coq.inria.fr/a-short-introduction-to-coq">always use Coq</a>.</p>

<p>But for everyday programming languages and type systems it&#8217;s not that easy, say for instance this <code>Java</code> function (assuming such thing exists).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">int</span> <span class="nf">f1</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">1</span><span class="o">/</span><span class="n">x</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can say just by looking at the function, that any integer except zero will succeed.</p>

<p>In this other case:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">int</span> <span class="nf">f2</span><span class="o">(</span><span class="n">String</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">x</span><span class="o">.</span><span class="na">length</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The function will succeed except when <code>x</code> is <code>null</code>.</p>

<p>So assuming that&#8217;s expected behavior, you can write some tests to check on those special failure cases.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span><span class="o">(</span><span class="n">expected</span><span class="o">=</span><span class="n">ArithmeticException</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testDivideByZero</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">f1</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//this is just a unit test</span>
</span><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testUnity</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">assertEquals</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">f1</span><span class="o">(</span><span class="mi">1</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Test</span><span class="o">(</span><span class="n">expected</span><span class="o">=</span><span class="n">NullPointerException</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testNullPointerException</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">f2</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>But for the sake of making and argument, assume you&#8217;re testing <code>openssl</code> and this is the function you have&#8230;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">dtls1_process_heartbeat</span><span class="p">(</span><span class="n">SSL</span> <span class="o">*</span><span class="n">s</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>    
</span><span class='line'>  <span class="cm">/* Read type and payload length first */</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="mi">1</span> <span class="o">+</span> <span class="mi">2</span> <span class="o">+</span> <span class="mi">16</span> <span class="o">&gt;</span> <span class="n">s</span><span class="o">-&gt;</span><span class="n">s3</span><span class="o">-&gt;</span><span class="n">rrec</span><span class="p">.</span><span class="n">length</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">0</span><span class="p">;</span> <span class="cm">/* silently discard */</span>
</span><span class='line'>  <span class="n">hbtype</span> <span class="o">=</span> <span class="o">*</span><span class="n">p</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>  <span class="n">n2s</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">payload</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="mi">1</span> <span class="o">+</span> <span class="mi">2</span> <span class="o">+</span> <span class="n">payload</span> <span class="o">+</span> <span class="mi">16</span> <span class="o">&gt;</span> <span class="n">s</span><span class="o">-&gt;</span><span class="n">s3</span><span class="o">-&gt;</span><span class="n">rrec</span><span class="p">.</span><span class="n">length</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">0</span><span class="p">;</span> <span class="cm">/* silently discard per RFC 6520 sec. 4 */</span>
</span><span class='line'>  <span class="n">pl</span> <span class="o">=</span> <span class="n">p</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">hbtype</span> <span class="o">==</span> <span class="n">TLS1_HB_REQUEST</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>      <span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">buffer</span><span class="p">,</span> <span class="o">*</span><span class="n">bp</span><span class="p">;</span>
</span><span class='line'>      <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">write_length</span> <span class="o">=</span> <span class="mi">1</span> <span class="cm">/* heartbeat type */</span> <span class="o">+</span>
</span><span class='line'>                      <span class="mi">2</span> <span class="cm">/* heartbeat length */</span> <span class="o">+</span>
</span><span class='line'>                      <span class="n">payload</span> <span class="o">+</span> <span class="n">padding</span><span class="p">;</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">r</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">write_length</span> <span class="o">&gt;</span> <span class="n">SSL3_RT_MAX_PLAIN_LENGTH</span><span class="p">)</span>
</span><span class='line'>          <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="cm">/* Allocate memory for the response, size is 1 byte</span>
</span><span class='line'><span class="cm">      * message type, plus 2 bytes payload length, plus</span>
</span><span class='line'><span class="cm">      * payload, plus padding</span>
</span><span class='line'><span class="cm">      */</span>
</span><span class='line'>      <span class="n">buffer</span> <span class="o">=</span> <span class="n">OPENSSL_malloc</span><span class="p">(</span><span class="n">write_length</span><span class="p">);</span>
</span><span class='line'>      <span class="n">bp</span> <span class="o">=</span> <span class="n">buffer</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="cm">/* Enter response type, length and copy payload */</span>
</span><span class='line'>      <span class="o">*</span><span class="n">bp</span><span class="o">++</span> <span class="o">=</span> <span class="n">TLS1_HB_RESPONSE</span><span class="p">;</span>
</span><span class='line'>      <span class="n">s2n</span><span class="p">(</span><span class="n">payload</span><span class="p">,</span> <span class="n">bp</span><span class="p">);</span>
</span><span class='line'>      <span class="n">memcpy</span><span class="p">(</span><span class="n">bp</span><span class="p">,</span> <span class="n">pl</span><span class="p">,</span> <span class="n">payload</span><span class="p">);</span>
</span><span class='line'>      <span class="n">bp</span> <span class="o">+=</span> <span class="n">payload</span><span class="p">;</span>
</span><span class='line'>      <span class="cm">/* Random padding */</span>
</span><span class='line'>      <span class="n">RAND_pseudo_bytes</span><span class="p">(</span><span class="n">bp</span><span class="p">,</span> <span class="n">padding</span><span class="p">);</span>
</span><span class='line'>    <span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Unless you&#8217;ve been living under a rock, you should have heard about <a href="http://heartbleed.com/">the heartbleed openssl bug</a>, and it&#8217;s just what you think, the bug was in the heartbeat processing function above, and <a href="http://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=96db902">this is the patch with the fix</a>.</p>

<p><img class="center" src="http://guilespi.github.com/images/blog/opensslpatch.png" width="680" height="780" title="'Openssl heartbleed patch'" ></p>

<p>Who was the motherfucker that missed that unit test, huh?</p>

<p>When the function logic is more complex, it&#8217;s exponentially more difficult to define both types and tests that make us feel more confident about pushing our nasty bits of code to a production environment.</p>

<p>And that&#8217;s because the possible states our system or function can be, expand like hell when new variables and conditional branches are added (more on this later).</p>

<h2>Code Coverage vs. Domain Coverage</h2>

<p>Looking at the function above you can see the problem is not on some untested code path, but on some <em>values</em> used on function invocation.</p>

<p>Some people aim for 100% code coverage, according to <a href="http://en.wikipedia.org/wiki/Code_coverage">Wikipedia</a></p>

<p><em>In computer science, code coverage is a measure used to describe the degree to which the source code of a program is tested by a particular test suite. A program with high code coverage has been more thoroughly tested and has a lower chance of containing software bugs than a program with low code coverage.</em></p>

<p>Which is great, but since you can have 100% code coverage of the <code>1/x</code> function, but regarding domain coverage (for which values of <code>x</code> the function works as expected) you have nothing.</p>

<p><strong>Code coverage without domain coverage is just half the picture.</strong></p>

<p>Even unit tests prove <em>almost</em> nothing.</p>

<h2>Tests do not prove correctness</h2>

<p>There&#8217;s a great quote by <a href="http://en.wikiquote.org/wiki/Edsger_W._Dijkstra">Edsger Dijkstra</a> from Notes on Structured Programming that says</p>

<p><em>Program testing can be used to show the presence of bugs, but never to show their absence!</em></p>

<p>Which is to say, no matter how many unit tests you write, you&#8217;re only proving that your program works (or fails) for the set of inputs you have selected when writing your tests.</p>

<p>It doesn&#8217;t say a thing about the generalities or about a general property of the system or function under test.</p>

<h2>What is generative testing?</h2>

<p>So what <em>is</em> generative testing?</p>

<p>In generative testing you describe some properties your system or function must comply with, and the test runner provides randomized data to check if the property holds for that data, that&#8217;s why it&#8217;s also known as <code>property-based</code> testing.</p>

<p>A <code>property</code> is a high-level specification of behavior that should hold for a range of data points.</p>

<p>So a property works somewhat like a <em>domain iterator</em>, bringing a little bit closer types and tests.</p>

<p>Since you&#8217;re defining how the system should behave for a particular <em>domain</em> of values, not when the program is compiled, but when it&#8217;s <strong>run</strong>.</p>

<h2>Why random data generation is important?</h2>

<p>In the StrangeLoop 2014 conference, Joe Armstrong gave a talk called <a href="https://www.youtube.com/watch?v=lKXe3HUG2l4">The mess we&#8217;re in</a>, where he discussed system&#8217;s complexity, go watch it since it&#8217;s real fun.</p>

<p>He says that a <code>C</code> program with only six <code>32 bit</code> integers, has the same number of states that atoms exist on the planet, so testing your program by computing all combinations it&#8217;s going to take a <em>really long</em> time.</p>

<p>And if it&#8217;s almost impossible to find the number of states computationally, imagine trying to find the number of possible failing states <em>manually</em>.</p>

<p>I&#8217;ve been in the position of having to hunt a bug that occurs only once a year in a system processing millions of transactions daily, and it&#8217;s not fun at all. Pray to the logging gods the proper piece of information revealing the culprit is logged, so you don&#8217;t have to wait another year for the bug to show up.</p>

<p>If your software runs inside a car, would you wait for the next deadly crash to analyze that dead-driver log file? Maybe that&#8217;s why <a href="http://www.quviq.com/volvo-quickcheck/">Volvo uses QuickCheck</a> to test embedded systems.</p>

<p>Generative testing helps you put and test your system in so many different states it would be impossible to do manually.</p>

<h2>What&#8217;s in a property</h2>

<p>So, should we throw away all of our type systems and unit tests?</p>

<p>Not so fast, property based testing is not a <strong>replacement</strong> for types nor for unit tests.</p>

<p>Haskell and Scala both have their frameworks for property based testing (QuickCheck and ScalaTest) and are strongly typed languages.</p>

<p>Property based testing helps us define considerations for our programs where type systems do not reach, and where dynamically typed languages have a void.</p>

<p>So what does a property look like?</p>

<p>All concepts so far hold true for any language with a generative testing framework, many re-implementations exist from the <a href="http://en.wikipedia.org/wiki/QuickCheck">original QuickCheck version</a>, from <code>C</code>, <code>C++</code>, <code>Ruby</code>, <code>Clojure</code>, <code>Javascript</code>, <code>Java</code>, <code>Scala</code>, etc. So now I will show you a couple of examples in different languages, just for you to grasp the basic property definition semantics, which is quite similar along the implementations.</p>

<p>These examples are not meant to show how powerful generative testing can be, yet.</p>

<h3>Sorting in Javascript</h3>

<p>Let&#8217;s say you want to test a <code>sort</code> function of yours, and instead of specifying individual test cases for particular arrays of integers, you define a property, which says that after sorting the array, the last element should always be greater than the first one.</p>

<p>This is what the property looks like in Javascript&#8217;s <a href="www.jscheck.org">JSCheck</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">JSC</span><span class="p">.</span><span class="nx">reps</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span><span class='line'><span class="nx">JSC</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span>
</span><span class='line'>    <span class="s2">&quot;First is lower than last after sort&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="kd">function</span> <span class="p">(</span><span class="nx">verdict</span><span class="p">,</span> <span class="nx">v</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">sorted</span> <span class="o">=</span> <span class="nx">v</span><span class="p">.</span><span class="nx">sort</span><span class="p">();</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">verdict</span><span class="p">(</span><span class="nx">sorted</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;</span> <span class="nx">sorted</span><span class="p">[</span><span class="nx">sorted</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">[</span>
</span><span class='line'>        <span class="nx">JSC</span><span class="p">.</span><span class="nx">array</span><span class="p">([</span><span class="nx">JSC</span><span class="p">.</span><span class="nx">integer</span><span class="p">()]])</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>You don&#8217;t say which particular arrays, just any array of integers must comply with the property, the framework will generate values for you (in this case 10 repetitions will be run).</p>

<p>This is the result:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">First</span> <span class="nx">is</span> <span class="nx">lower</span> <span class="nx">than</span> <span class="nx">last</span> <span class="nx">after</span> <span class="nx">sort</span><span class="o">:</span> <span class="mi">10</span> <span class="nx">cases</span> <span class="nx">tested</span><span class="p">,</span> <span class="mi">0</span> <span class="nx">pass</span><span class="p">,</span> <span class="mi">10</span> <span class="nx">fail</span>
</span><span class='line'> <span class="nx">FAIL</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="p">([</span><span class="mi">3</span><span class="p">])</span>
</span><span class='line'> <span class="nx">FAIL</span> <span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="p">([</span><span class="mi">5</span><span class="p">])</span>
</span><span class='line'> <span class="nx">FAIL</span> <span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="p">([</span><span class="mi">7</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>Did you spot when the property doesn&#8217;t hold?</p>

<h3>Sorting in Clojure</h3>

<p>This is what the same property looks like in Clojure&#8217;s <a href="https://github.com/clojure/test.check">test.check</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">prop-sorted-first-less-than-last</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">prop/for-all</span> <span class="p">[</span><span class="nv">v</span> <span class="p">(</span><span class="nf">gen/not-empty</span> <span class="p">(</span><span class="nf">gen/vector</span> <span class="nv">gen/int</span><span class="p">))]</span>
</span><span class='line'>    <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">s</span> <span class="p">(</span><span class="nb">sort </span><span class="nv">v</span><span class="p">)]</span>
</span><span class='line'>      <span class="p">(</span><span class="nb">&lt; </span><span class="p">(</span><span class="nb">first </span><span class="nv">s</span><span class="p">)</span> <span class="p">(</span><span class="nb">last </span><span class="nv">s</span><span class="p">)))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">tc/quick-check</span> <span class="mi">200</span> <span class="nv">prop-sorted-first-less-than-last</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>With the following result:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'>   <span class="nv">=&gt;</span> <span class="p">{</span><span class="ss">:result</span> <span class="nv">false</span>, <span class="ss">:failing-size</span> <span class="mi">0</span>, <span class="ss">:num-tests</span> <span class="mi">1</span>, <span class="ss">:fail</span> <span class="p">[[</span><span class="mi">3</span><span class="p">]]</span>,
</span><span class='line'>       <span class="ss">:shrunk</span> <span class="p">{</span><span class="ss">:total-nodes-visited</span> <span class="mi">5</span>, <span class="ss">:depth</span> <span class="mi">2</span>, <span class="ss">:result</span> <span class="nv">false</span>,
</span><span class='line'>                <span class="ss">:smallest</span> <span class="p">[[</span><span class="mi">0</span><span class="p">]]}}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you see, <strong>both fail</strong>, since they doesn&#8217;t hold for single element arrays.</p>

<p>The basic semantic for both languages is the same, you need:</p>

<ul>
<li>A property name (or claim in JSCheck)</li>
<li>Some data generator for your input values</li>
<li>A verdict or testing function who validates the property</li>
</ul>


<blockquote><p>This encourages a higher level approach to testing in the form of abstract invariant functions should satisfy universally.</p><footer><strong>http://book.realworldhaskell.org/read/testing-and-quality-assurance.html</strong></footer></blockquote>


<h2>Shrinking</h2>

<p>One of the best features of QuickCheck is the ability to shrink your failure cases to the minimum failing case (not all the implementations have it by the way).</p>

<p>When generating random data, you may end up with a failing case too big to rationalize (for instance a thousand elements vector), but it doesn&#8217;t necessarily means that all the 1000 elements are needed for the function under test to fail.</p>

<p>When QuickCheck finds a failing case, it tries to shrink the input data to the <em>smallest</em> failing case.</p>

<p>This is a powerful feature if you don&#8217;t want to repeat many unnecessary steps in order to reproduce a problem.</p>

<p>A simple example to illustrate the feature comes from <code>test.check</code> samples.</p>

<p>Here a property must hold for all integer vectors, and it is that no vector should have the element <code>42</code> in it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">prop-no-42</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">prop/for-all</span> <span class="p">[</span><span class="nv">v</span> <span class="p">(</span><span class="nf">gen/vector</span> <span class="nv">gen/int</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">not </span><span class="p">(</span><span class="nb">some </span><span class="o">#</span><span class="p">{</span><span class="mi">42</span><span class="p">}</span> <span class="nv">v</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>When the tests are run, <code>test.check</code> find a failing case being the vector <code>[10 1 28 40 11 -33 42 -42 39 -13 13 -44 -36 11 27 -42 4 21 -39]</code>, which is <strong>not</strong> the minimum failing case.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">tc/quick-check</span> <span class="mi">100</span> <span class="nv">prop-no-42</span><span class="p">)</span>
</span><span class='line'><span class="c1">;; =&gt; {:result false,</span>
</span><span class='line'>       <span class="ss">:failing-size</span> <span class="mi">45</span>,
</span><span class='line'>       <span class="ss">:num-tests</span> <span class="mi">46</span>,
</span><span class='line'>       <span class="ss">:fail</span> <span class="p">[[</span><span class="mi">10</span> <span class="mi">1</span> <span class="mi">28</span> <span class="mi">40</span> <span class="mi">11</span> <span class="mi">-33</span> <span class="mi">42</span> <span class="mi">-42</span> <span class="mi">39</span> <span class="mi">-13</span> <span class="mi">13</span> <span class="mi">-44</span> <span class="mi">-36</span> <span class="mi">11</span> <span class="mi">27</span> <span class="mi">-42</span> <span class="mi">4</span> <span class="mi">21</span> <span class="mi">-39</span><span class="p">]]</span>,
</span><span class='line'>       <span class="ss">:shrunk</span> <span class="p">{</span><span class="ss">:total-nodes-visited</span> <span class="mi">38</span>,
</span><span class='line'>                <span class="ss">:depth</span> <span class="mi">18</span>,
</span><span class='line'>                <span class="ss">:result</span> <span class="nv">false</span>,
</span><span class='line'>                <span class="ss">:smallest</span> <span class="p">[[</span><span class="mi">42</span><span class="p">]]}}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So it starts shrinking the failing case until it reaches the smallest vector for which the property doesn&#8217;t hold, which is <code>[42]</code>.</p>

<p>Unfortunately <code>JSCheck</code> doesn&#8217;t shrink the failure cases, but <a href="http://jsverify.github.io/">jsverify</a> does, so if you want some shrinking on Javascript give it a try.</p>

<h2>Final thoughts</h2>

<p>Since QuickCheck depends on generators to cover the domain, we need to consider those domains may be infinite or very large, so it may be impossible to find the offending failure cases. None the less, we know that by running long enough or a large enough number of tests, we have better odds of finding a problem.</p>

<p>Regarding the name, <code>property-based</code> testing is a much better name than <code>generative</code> testing, since the later gives the idea that it&#8217;s about generating data, when it&#8217;s truly about function and system properties.</p>

<p>The higher level approach of property definition, coupled with the data generation and shrinking features provided by QuickCheck, really helps the case of having something more closer to <em>proofs</em> about how your system behaves.</p>

<p>In the next post I&#8217;ll write about finite state machine testing using <code>test.check</code> and show more complex examples, stay tuned.</p>

<p>I&#8217;m <a href="https://twitter.com/guilespi">guilespi</a> on Twitter, reach out!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Computational Investment QSTK Framework from Python to Clojure]]></title>
    <link href="http://guilespi.github.com/blog/2012/10/29/computational-investment-qstk-framework-from-python-to-clojure/"/>
    <updated>2012-10-29T01:07:00-02:00</updated>
    <id>http://guilespi.github.com/blog/2012/10/29/computational-investment-qstk-framework-from-python-to-clojure</id>
    <content type="html"><![CDATA[<p>Last week started the course on <a href="https://class.coursera.org/compinvesting1-2012-001/class/index">Computational Investing</a> from Coursera and I&#8217;ve been taking a look.</p>

<p>What caught my attention is the libraries used for portfolio construction and management, <a href="http://wiki.quantsoftware.org/index.php?title=QuantSoftware_ToolKit">QSTK</a>, an opensource python framework, based on numpy, scipy, matplotlib, pandas, etc.</p>

<p>Looking at the <a href="http://wiki.quantsoftware.org/index.php?title=QSTK_Tutorial_1">first tutorial</a>&#8217;s <a href="https://gist.github.com/3971007">source code</a>, saw it as an opportunity to migrate the tutorials and libraries to Clojure and get to play a little with <a href="http://incanter.org/">Incanter</a>.</p>

<p>I&#8217;m going to highlight what I&#8217;ve found interesting when migrating the tutorials. I&#8217;m assuming you have QSTK installed and the QS environment variable is set, since the code depends on that for data reading.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="o">^</span><span class="p">{</span><span class="ss">:dynamic</span> <span class="nv">true</span><span class="p">}</span> <span class="nv">*QS*</span> <span class="p">(</span><span class="nb">get </span><span class="p">(</span><span class="nf">System/getenv</span><span class="p">)</span> <span class="s">&quot;QS&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>NYSE operation dates</strong></p>

<p>As part of the initialization process the tutorial calls a function <a href="http://www.quantsoftware.org/Docs/html/QSTK.qstkutil.dateutil-pysrc.html#getNYSEdays">getNYSEDays</a>, which retrieves all the days there was trading at the NYSE. Migration is straightforward using incanter&#8217;s read-dataset to read file into memory and then filter the required range.</p>

<div><script src='https://gist.github.com/3970987.js'></script>
<noscript><pre><code>(defn get-NYSE-days
  &quot;Create a set of timestamps between startday and endday
  that correspond to the days there was trading at the NYSE&quot;
  [start-date end-date time-of-day]
  (let [dates-file (str *QS* &quot;/qstkutil/NYSE_dates.txt&quot;)
        NYSE-dates (incanter.io/read-dataset dates-file)
        fmt (formatter &quot;MM/dd/yyyy&quot;)
        dates (incanter.core/$map #(parse fmt %) :col0 NYSE-dates)]
    (set (filter (fn [d] (within? (interval start-date end-date) d))
           (map #(plus % time-of-day) dates)))))
</code></pre></noscript></div>


<p>Pay attention to the <code>time-of-day</code> set at 16 hours, <a href="http://en.wikipedia.org/wiki/List_of_market_opening_times">the time NYSE closes</a>, we&#8217;ll see it again in unexpected places.</p>

<p><strong>Data Access</strong></p>

<p>QSTK provides a helper class called <a href="http://www.quantsoftware.org/Docs/html/QSTK.qstkutil.DataAccess.DataAccess-class.html">DataAccess</a> used for reading and caching stock prices.</p>

<p>As you see here there&#8217;s some data reading happening, we&#8217;re gonna take a look at these functions since we&#8217;ll need to write them from scratch.</p>

<figure class='code'><figcaption><span>Data initialization in python tutorial </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">dataobj</span> <span class="o">=</span> <span class="n">da</span><span class="o">.</span><span class="n">DataAccess</span><span class="p">(</span><span class="s">&#39;Yahoo&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">voldata</span> <span class="o">=</span> <span class="n">dataobj</span><span class="o">.</span><span class="n">get_data</span><span class="p">(</span><span class="n">timestamps</span><span class="p">,</span> <span class="n">symbols</span><span class="p">,</span> <span class="s">&quot;volume&quot;</span><span class="p">,</span><span class="n">verbose</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'><span class="n">close</span> <span class="o">=</span> <span class="n">dataobj</span><span class="o">.</span><span class="n">get_data</span><span class="p">(</span><span class="n">timestamps</span><span class="p">,</span> <span class="n">symbols</span><span class="p">,</span> <span class="s">&quot;close&quot;</span><span class="p">,</span><span class="n">verbose</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'><span class="n">actualclose</span> <span class="o">=</span> <span class="n">dataobj</span><span class="o">.</span><span class="n">get_data</span><span class="p">(</span><span class="n">timestamps</span><span class="p">,</span> <span class="n">symbols</span><span class="p">,</span> <span class="s">&quot;actual_close&quot;</span><span class="p">,</span><span class="n">verbose</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&#8217;re going to separate this in two functions, first reading symbol data from disk using again read-dataset and creating a hash-map indexed by symbol name.</p>

<figure class='code'><figcaption><span>Creating a symbols hash-map of incanter datasets</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='Clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">read-symbols-data</span>
</span><span class='line'>  <span class="s">&quot;Returns a hashmap of symbols/incanter datasets read from QS data directory&quot;</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">source-in</span> <span class="nv">symbols</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">data-dir</span> <span class="p">(</span><span class="nb">str </span><span class="nv">*QS*</span> <span class="s">&quot;/QSData/&quot;</span> <span class="nv">source-in</span> <span class="s">&quot;/&quot;</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">reduce </span><span class="o">#</span><span class="p">(</span><span class="nb">assoc </span><span class="nv">%1</span> <span class="nv">%2</span> <span class="p">(</span><span class="nf">incanter.io/read-dataset</span> <span class="p">(</span><span class="nb">str </span><span class="nv">data-dir</span> <span class="nv">%2</span> <span class="s">&quot;.csv&quot;</span><span class="p">)</span> <span class="ss">:header</span> <span class="nv">true</span><span class="p">))</span> <span class="p">{}</span> <span class="nv">symbols</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then if you take a look at <code>voldata</code> in a python repl, you can see pretty much what it&#8217;s doing</p>

<pre><code>                       AAPL       GLD     GOOG        $SPX       XOM
 2012-05-01 16:00:00  21821400   7414800  2002300  2706893315  13816900
 2012-05-02 16:00:00  15263900   5632300  1611500  2634854740  11108700
 2012-05-03 16:00:00  13948200  13172000  1868000  2673299265   9998600
</code></pre>

<p>It&#8217;s grabbing the specified column <code>volume</code> or <code>close</code> from each symbol dataset, and it&#8217;s creating a new table with the resulting column renamed as the symbol.</p>

<p>All the get_data magic happens inside <a href="http://www.quantsoftware.org/Docs/html/QSTK.qstkutil.DataAccess-pysrc.html#DataAccess.get_data_hardread">get_data_hardread</a>, it&#8217;s an ugly piece of code making a lot of assumptions about column names, and even about market closing time. I guess you can only use this library for markets closing at 16 hours local time.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">timemonth</span> <span class="o">=</span> <span class="nb">int</span><span class="p">((</span><span class="n">timebase</span><span class="o">-</span><span class="n">timeyear</span><span class="o">*</span><span class="mi">10000</span><span class="p">)</span><span class="o">/</span><span class="mi">100</span><span class="p">)</span>
</span><span class='line'><span class="n">timeday</span> <span class="o">=</span> <span class="nb">int</span><span class="p">((</span><span class="n">timebase</span><span class="o">-</span><span class="n">timeyear</span><span class="o">*</span><span class="mi">10000</span><span class="o">-</span><span class="n">timemonth</span><span class="o">*</span><span class="mi">100</span><span class="p">))</span>
</span><span class='line'><span class="n">timehour</span> <span class="o">=</span> <span class="mi">16</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&#8217;ve translated that into these two functions:</p>

<div><script src='https://gist.github.com/3971076.js'></script>
<noscript><pre><code>(defn select-value
  &quot;Given a dataset indexed by date, returns the value corresponding to a specified column
  if existent for a specific date&quot;
  [ds column date]
  (let [row (ds {:Date date})]
    (when-not (nil? row) (incanter.core/$ 0 column row))))

(defn get-data
  &quot;Given a list of `symbols`, its data and a list of specific `timestamps`, builds a matrix(sequence)
  with each column corresponding to a stock and the value extracted using `column` 
  :Date        AAPL    GOOG    WFC
  2012-02-01   54.1    33.1    25.0
  2012-02-02   56.3    33.4    22.9&quot;
  [timestamps symbols column symbols-data time-of-day]
  (let [grouped-data (reduce (fn [m, s] (assoc m (s 0) (incanter.core/$group-by :Date (s 1)))) {} symbols-data)]
    (for [t timestamps]
      (let [unparsed-date (unparse (formatters :year-month-day) t)]
        (reduce #(merge %1 {(%2 0) (select-value (%2 1) column unparsed-date)}) {:Date (to-long t)} grouped-data)))))</code></pre></noscript></div>


<p>In this case Clojure shines, the <a href="https://gist.github.com/3971102">original function</a> is almost 300 lines of code. I&#8217;m missing a couple of checks but it&#8217;s not bad for a rookie, I think.</p>

<p>The helper function <code>select-value</code> is there in order to avoid an exception when trying to find stock data for a non existent date. Also the function returns <code>:Date</code> as a double since it&#8217;s easier to handle later for charting.</p>

<p><strong>Charting</strong></p>

<p>Charting with Incanter is straightforward, there a subtle difference with python since you need to add each series one by one. So what python is doing here charting multiple series at once</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">newtimestamps</span> <span class="o">=</span> <span class="n">close</span><span class="o">.</span><span class="n">index</span>
</span><span class='line'><span class="n">pricedat</span> <span class="o">=</span> <span class="n">close</span><span class="o">.</span><span class="n">values</span> <span class="c"># pull the 2D ndarray out of the pandas object</span>
</span><span class='line'><span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">newtimestamps</span><span class="p">,</span><span class="n">pricedat</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>We need a little function to solve it with Incanter. Each iteration gets reduced into the next with all the series accumulated in one chart.</p>

<figure class='code'><figcaption><span>creates multiple time-series at once</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">multi-series-chart</span>
</span><span class='line'>  <span class="s">&quot;Creates a xy-chart with multiple series extracted from column data</span>
</span><span class='line'><span class="s">  as specified by series parameter&quot;</span>
</span><span class='line'>  <span class="p">[{</span><span class="ss">:keys</span> <span class="p">[</span><span class="nv">series</span> <span class="nv">title</span> <span class="nv">x-label</span> <span class="nv">y-label</span> <span class="nv">data</span><span class="p">]}]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">chart</span> <span class="p">(</span><span class="nf">incanter.charts/time-series-plot</span> <span class="ss">:Date</span> <span class="p">(</span><span class="nb">first </span><span class="nv">series</span><span class="p">)</span>
</span><span class='line'>                                                 <span class="ss">:x-label</span> <span class="nv">x-label</span>
</span><span class='line'>                                                 <span class="ss">:y-label</span> <span class="nv">y-label</span>
</span><span class='line'>                                                 <span class="ss">:title</span> <span class="nv">title</span>
</span><span class='line'>                                                 <span class="ss">:series-label</span> <span class="p">(</span><span class="nb">first </span><span class="nv">series</span><span class="p">)</span>
</span><span class='line'>                                                 <span class="ss">:legend</span> <span class="nv">true</span>
</span><span class='line'>                                                 <span class="ss">:data</span> <span class="nv">data</span><span class="p">)]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">reduce </span><span class="o">#</span><span class="p">(</span><span class="nf">incanter.charts/add-lines</span> <span class="nv">%1</span> <span class="ss">:Date</span> <span class="nv">%2</span> <span class="ss">:series-label</span> <span class="nv">%2</span> <span class="ss">:data</span> <span class="nv">data</span><span class="p">)</span> <span class="nv">chart</span> <span class="p">(</span><span class="nb">rest </span><span class="nv">series</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Data Mangling</strong></p>

<p>Incanter has <em>a lot</em> of built-in functions and helpers to operate on your data, unfortunately I couldn&#8217;t use one of the many options for operating
on a matrix, or even <code>$=</code>, since the data we&#8217;re processing has many <code>nil</code> values inside the dataset for dates the stock didn&#8217;t trade which raises an exception when
treated as a number, which is what to-matrix does, tries to create an array of Doubles.</p>

<p>There&#8217;s one more downside and it&#8217;s we need to keep the <code>:Date</code> column as-is when operating on the dataset, so we need to remove it, operate, and add it later again, what happens to be a beautiful one-liner in python</p>

<figure class='code'><figcaption><span>This attempts a naive normalization dividing each row by the first one. </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'> <span class="n">normdat</span> <span class="o">=</span> <span class="n">pricedat</span><span class="o">/</span><span class="n">pricedat</span><span class="p">[</span><span class="mi">0</span><span class="p">,:]</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Or the daily return function. </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">dailyrets</span> <span class="o">=</span> <span class="p">(</span><span class="n">pricedat</span><span class="p">[</span><span class="mi">1</span><span class="p">:,:]</span><span class="o">/</span><span class="n">pricedat</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="o">-</span><span class="mi">1</span><span class="p">,:])</span> <span class="o">-</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>I ended up writing from scratch the iteration and function applying code.</p>

<div><script src='https://gist.github.com/3971236.js'></script>
<noscript><pre><code>
(defmacro apply-filtered
  &quot;Given two sequences, apply a function to each pair of elements when condition is met
  anaphoras n and m exists for each indexed element

  e.g. (apply-filtered / [1 2 3] [1 0 3] when (&gt; m 0)) =&gt; (1 nil 1)
  &quot;
  [op a b &amp; condition]
  `(for [x# (range (count ~a))]
    (let [n# (nth ~a x#)
          m# (nth ~b x#)]
      (when (~(second condition) n# m#)
        (~op n# m#)))))

(defmacro apply-rows
  &quot;Apply an operation to each row of the dataset excluding :Date column
   A start row and a condition must be given

  .e.g Divide each row by vector [1 0 3] starting from 0 validating divide by zero
    (apply-rows ds (/ [1 2 3]) 0 (fn [n m] (&gt; m 0))&quot;
  [data operation start cond]
  `(let [raw-data# (incanter.core/$ :all [:not :Date] ~data)
        raw-cols# (incanter.core/col-names raw-data#)
        dates# (incanter.core/$ :all :Date ~data)] 
       (incanter.core/col-names
        (incanter.core/conj-cols
         (for [~&#39;i (range ~start (incanter.core/nrow raw-data#))]
           (apply-filtered
                      ~(first operation)
                      (vec (incanter.core/$ ~&#39;i [:not :Date] raw-data#))
                      ~(second operation)
                      :when ~cond))
         dates#) (conj raw-cols# :Date))))
</code></pre></noscript></div>


<p>Maybe there&#8217;s an easier way but I couldn&#8217;t think of it, if you know a better way please drop me a line!</p>

<p>Now normalization and daily-returns are at least manageable.</p>

<figure class='code'><figcaption><span>Normalization and Daily Returns</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">normalize</span>
</span><span class='line'>  <span class="s">&quot;Divide each row in a dataset by the first row&quot;</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">ds</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">first-row</span> <span class="p">(</span><span class="nf">vec</span> <span class="p">(</span><span class="nf">incanter.core/$</span> <span class="mi">0</span> <span class="p">[</span><span class="ss">:not</span> <span class="ss">:Date</span><span class="p">]</span> <span class="nv">ds</span><span class="p">))]</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">apply-rows</span> <span class="nv">ds</span> <span class="p">(</span><span class="nb">/ </span><span class="nv">first-row</span><span class="p">)</span> <span class="mi">0</span> <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">n</span> <span class="nv">m</span><span class="p">]</span> <span class="p">(</span><span class="nb">and </span><span class="p">(</span><span class="nb">not-any? nil? </span><span class="p">[</span><span class="nv">n</span> <span class="nv">m</span><span class="p">])</span> <span class="p">(</span><span class="nb">&gt; </span><span class="nv">m</span> <span class="mi">0</span><span class="p">))))))</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">daily-rets</span>
</span><span class='line'>  <span class="s">&quot;Daily returns&quot;</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">data</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">apply-rows</span> <span class="nv">data</span>
</span><span class='line'>            <span class="p">((</span><span class="k">fn </span><span class="p">[</span><span class="nv">n</span> <span class="nv">m</span><span class="p">]</span> <span class="p">(</span><span class="nb">- </span><span class="p">(</span><span class="nb">/ </span><span class="nv">n</span> <span class="nv">m</span><span class="p">)</span> <span class="mi">1</span><span class="p">))</span> <span class="p">(</span><span class="nf">vec</span> <span class="p">(</span><span class="nf">incanter.core/$</span> <span class="p">(</span><span class="nb">- </span><span class="nv">i</span> <span class="mi">1</span><span class="p">)</span> <span class="p">[</span><span class="ss">:not</span> <span class="ss">:Date</span><span class="p">]</span> <span class="nv">data</span><span class="p">)))</span>
</span><span class='line'>            <span class="mi">1</span>
</span><span class='line'>            <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">n</span> <span class="nv">m</span><span class="p">]</span> <span class="p">(</span><span class="nb">and </span><span class="p">(</span><span class="nb">not-any? nil? </span><span class="p">[</span><span class="nv">n</span> <span class="nv">m</span><span class="p">])</span> <span class="p">(</span><span class="nb">&gt; </span><span class="nv">m</span> <span class="mi">0</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Having the helper functions done, running of the tutorial is almost declarative.</p>

<div><script src='https://gist.github.com/3971246.js'></script>
<noscript><pre><code>(defn run
  []
  (let [symbols [&quot;AAPL&quot;,&quot;GLD&quot;,&quot;GOOG&quot;,&quot;$SPX&quot;,&quot;XOM&quot;]
        start-day (date-time 2012 1 1)
        end-day (date-time 2012 12 31)
        time-of-day (hours 16)
        timestamps (get-NYSE-days start-day end-day time-of-day)
        symbols-data (read-symbols-data &quot;Yahoo&quot; symbols)
        adj-close-data (incanter.core/to-dataset
                        (get-data timestamps symbols (keyword &quot;Adj Close&quot;) symbols-data time-of-day))]
    (do
      ;;first chart of the tutorial
      (incanter.core/view (multi-series-chart {:series symbols
                                               :x-label &quot;Date&quot;
                                               :y-label &quot;Adjusted Close&quot;
                                               :title &quot;Adjusted close data&quot;
                                               :data adj-close-data}))
      ;;second chart of the tutorial
      (incanter.core/view (multi-series-chart {:series symbols
                                               :x-label &quot;Date&quot;
                                               :y-label &quot;Adjusted Close&quot;
                                               :title &quot;Normalized close data&quot;
                                               :data (normalize adj-close-data)}))
      ;;daily returns
      (incanter.core/view (multi-series-chart {:series symbols
                                               :x-label &quot;Date&quot;
                                               :y-label &quot;Return&quot;
                                               :title &quot;Daily Returns&quot;
                                               :data (daily-rets adj-close-data)}))
      ;;quotes comparison with scatter plot
      (incanter.core/view (incanter.charts/scatter-plot
                           &quot;AAPL&quot; &quot;GOOG&quot;
                           :x-label &quot;AAPL&quot;
                           :y-label &quot;GOOG&quot;
                           :legend true
                           :data (normalize adj-close-data)
                           )))))</code></pre></noscript></div>


<p>If you wanna take a look at the whole thing together here&#8217;s the <a href="https://gist.github.com/3971253">gist</a>, I may create a repo later.</p>

<p><img class="center" src="http://guilespi.github.com/images/blog/chartincanter.png" width="380" height="480" title="'Incanter charting finance data'" ></p>

<p>Please remember NumPy is way much faster than Clojure since it links <a href="http://www.netlib.org/lapack/">BLAS/Lapack</a> libraries.</p>

<p><em>Follow me on <a href="http://www.twitter.com/guilespi">twitter</a></em></p>
]]></content>
  </entry>
  
</feed>
