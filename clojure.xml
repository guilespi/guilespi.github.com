<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Interrupted - Clojure]]></title>
  <link href="http://guilespi.github.com/atom.xml" rel="self"/>
  <link href="http://guilespi.github.com/"/>
  <updated>2014-04-21T19:02:31-03:00</updated>
  <id>http://guilespi.github.com/</id>
  <author>
    <name><![CDATA[Guillermo Winkler]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Decompiling Clojure II, The Compiler]]></title>
    <link href="http://guilespi.github.com/blog/2014/04/21/decompiling-clojure-ii/"/>
    <updated>2014-04-21T01:03:00-03:00</updated>
    <id>http://guilespi.github.com/blog/2014/04/21/decompiling-clojure-ii</id>
    <content type="html"><![CDATA[<p>This is the second post in the Decompiling Clojure series, <a href="blog.guillermowinkler.com/blog/2014/04/13/decompiling-clojure-i/">in the first post</a> I showed what Clojure looks like in bytecode.</p>

<p>For this entry, I&#8217;ll do a compiler overview, the idea is to understand why and how does Clojure looks like that.</p>

<p>For other decompilation scenarios you don&#8217;t usually have the advantage of looking at the compiler internals to guide your decompiling algorithms, so we&#8217;ll take our chance to peek at the compiler now.</p>

<p>We will visit some compiler source code, so be warned, there&#8217;s Java ahead.</p>

<h2>It&#8217;s Java</h2>

<p>Well, yes, the Clojure compiler targeting the JVM is written in Java, <a href="https://github.com/Bronsa/CinC">there is an ongoing effort</a> to have a Clojure-in-Clojure compiler, but the original compiler is nowhere near of being replaced.</p>

<p>The source code <a href="https://github.com/clojure/clojure">is hosted on GitHub</a>, but the development process is <a href="http://dev.clojure.org/display/community/JIRA+workflow">a little bit more convoluted</a>, which means you don&#8217;t just send pull requests for it, <a href="https://groups.google.com/d/msg/clojure/0gwjKtatf-0/dOMECoHPlM4J">it was asked for many times</a> and I don&#8217;t think it&#8217;s about to change, so if you wanna contribute, <a href="http://clojure.org/contributing">just sign the contributors agreement</a> and follow the rules.</p>

<h2>The CinC Alternative</h2>

<p>The Clojure-in-Clojure alternative is not only different because it&#8217;s written in Clojure, but because it&#8217;s built with extensibility and modularization in mind.</p>

<p>In the original Clojure compiler you don&#8217;t have a chance to extend, modify or use, many of the data produced by the compilation process.</p>

<p>For instance the <a href="https://github.com/clojure/core.typed">Typed Clojure</a> project, which adds <a href="http://wphomes.soic.indiana.edu/jsiek/what-is-gradual-typing/">gradual typing</a> to Clojure, <a href="http://dev.clojure.org/display/design/Provide+friendly+interface+to+Clojure's+analyzer,+independently+callable+a+la+carte">needed a friendlier interface</a> to the compiler analyzer phase. It was first developed by Ambrose Bonnair-Sergeant <a href="https://github.com/frenchy64/analyze">as an interface to the Compiler analyzer</a> and then moved to be part of the <a href="https://github.com/clojure/tools.analyzer">CinC analyzer</a>.</p>

<p>The CinC alternative is modularized in -at least three- different parts.</p>

<ul>
<li><a href="https://github.com/clojure/tools.analyzer">The analyzer</a>, meant to be shared among all Clojure compilers (as Clojurescript)</li>
<li><a href="https://github.com/clojure/tools.analyzer.jvm">The JVM analyzer</a>, contains specific compiler passes for the JVM (for instance locals clearing is done here)</li>
<li><a href="https://github.com/clojure/tools.emitter.jvm">The bytecode emitter</a>, actually emits JVM bytecode.</li>
</ul>


<p>There&#8217;s <a href="http://www.youtube.com/watch?v=KhRQmT22SSg">a great talk from Timothy Baldridge</a> showing some examples using the CinC analyzer, watch it.</p>

<h2>Compilation process</h2>

<p>One of supposed advantages of Lisp-like languages is that the concrete syntax is already the abstract syntax. If you&#8217;ve read some of the <a href="http://www.twitter.com/fogus">fogus</a> <a href="http://blog.fogus.me/tag/clj-compilation/">writings about Clojure compilation</a> tough, he has some opinions on that statement:</p>

<blockquote><p>This is junk. Actual ASTs are adorned with a boatload of additional information like local binding information, accessible bindings, arity information, and many other useful tidbits.</p><footer><strong>fogus</strong> <cite><a href='http://blog.fogus.me/2012/04/25/the-clojurescript-compilation-pipeline/'>blog.fogus.me/2012/04/25/&hellip;</a></cite></footer></blockquote>


<p>And he&#8217;s right, but there&#8217;s one more thing, Clojure and Lisp syntax are just serialization formats, mapping to the underlying data structure of the program.</p>

<p>That&#8217;s why Lisp like languages are easier to parse and unparse, or build tools for them, because the program data structure is accesible to the user and not only to the compiler.</p>

<p>Also that&#8217;s the reason why macros in Lisp or Clojure are so different than <a href="http://docs.scala-lang.org/overviews/macros/overview.html">macros in Scala</a>, where the pre-processor handles you an AST that has nothing to do with the Scala language itself.</p>

<p>That&#8217;s the proper definition of <a href="http://en.wikipedia.org/wiki/Homoiconicity">homoiconicity</a> by the way, the syntax is isomorphic with the AST.</p>

<h2>Compiler phases</h2>

<p>In general compilers can be broken up into three pieces</p>

<ol>
<li>Lexer/Parser</li>
<li>Analyzer</li>
<li>Emitter</li>
</ol>


<p>Clojure kind of follows this pattern, so if we&#8217;re compiling a Clojure program the <em>very</em> high level approach to the compilation pipeline would be:</p>

<ol>
<li>Read file</li>
<li>Read s-expression</li>
<li>Expand macros if present</li>
<li>Analyze</li>
<li>Generate JVM bytecode</li>
</ol>


<p>The first three steps are the <em>Reading</em> phase <a href="http://blog.fogus.me/2012/04/25/the-clojurescript-compilation-pipeline/">from the fogus article</a>.</p>

<p>There is one important thing about these steps:</p>

<p>Bytecode has <strong>no information about macros whatsoever</strong>, emitted bytecode corresponds to what you see with <a href="http://clojuredocs.org/clojure_core/clojure.core/macroexpand">macroexpand</a> calls.
Since macros are expanded before analyzing, you shouldn&#8217;t expect to find anything about your macro in the compiled bytecode, nada, niet, gone.</p>

<p>Meaning, we shouldn&#8217;t expect to be able to properly decompile macro&#8217;ed stuff either.</p>

<h2>Compile vs. Eval</h2>

<p>As said on the first post, the <code>class</code> file doesn&#8217;t need to be on disk, and that&#8217;s better understood if we think about <a href="http://clojuredocs.org/clojure_core/1.2.0/clojure.core/eval">eval</a>.</p>

<p>When you type a command in the <code>REPL</code> it needs to be properly translated to bytecode before the JVM is able to execute it, but it doesn&#8217;t mean the compiler will save a <code>class</code> file, then load it, and only then execute it.</p>

<p>It will be done on the fly.</p>

<p>We will consider three entry points for the compiler, <code>compile</code>, <code>load</code> and <code>eval</code>.</p>

<p><img class="center" src="http://guilespi.github.com/images/blog/compiler-reader.png" width="580" height="380" title="Compiler entry point" alt="Compiler entry points"></p>

<p>The <code>LispReader</code> is responsible for reading forms from an input stream.</p>

<h3>Compile Entry Point</h3>

<p><code>compile</code> is a static function found in the <code>Compiler.java</code> file, member of the <code>Compiler</code> class, and it does generate a <code>class</code> file on disk for each function in the compiled namespace.</p>

<p>For instance it will get called if you do the following in your REPL</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">compile</span> <span class="ss">&#39;clojure.core.reducers</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Clojure function just wraps over the Java function doing the actual work with the signature</p>

<figure class='code'><figcaption><span>compile</span><a href='https://github.com/clojure/clojure/blob/1.5.x/src/jvm/clojure/lang/Compiler.java#L7162'>Compiler.java </a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">Object</span> <span class="nf">compile</span><span class="o">(</span><span class="n">Reader</span> <span class="n">rdr</span><span class="o">,</span> <span class="n">String</span> <span class="n">sourcePath</span><span class="o">,</span> <span class="n">String</span> <span class="n">sourceName</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">{</span>
</span></code></pre></td></tr></table></div></figure>


<p>Besides all the preamble, <a href="https://github.com/clojure/clojure/blob/1.5.x/src/jvm/clojure/lang/Compiler.java#L7214-L7221">the core of the function</a> is just a loop which reads and calls the <code>compile1</code> function for each form found in the file.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">for</span><span class="o">(</span><span class="n">Object</span> <span class="n">r</span> <span class="o">=</span> <span class="n">LispReader</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">pushbackReader</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="n">EOF</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span> <span class="n">r</span> <span class="o">!=</span> <span class="n">EOF</span><span class="o">;</span>
</span><span class='line'>          <span class="n">r</span> <span class="o">=</span> <span class="n">LispReader</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">pushbackReader</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="n">EOF</span><span class="o">,</span> <span class="kc">false</span><span class="o">))</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>       <span class="n">compile1</span><span class="o">(</span><span class="n">gen</span><span class="o">,</span> <span class="n">objx</span><span class="o">,</span> <span class="n">r</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As we expect, <a href="https://github.com/clojure/clojure/blob/1.5.x/src/jvm/clojure/lang/Compiler.java#L7138-L7154">the compile1 function does macro expansion</a> before analyzing or emitting anything, if <code>form</code> turns out to be a list it recursively calls itself, which is
the <code>then</code> branch of the if test:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">form</span> <span class="o">=</span> <span class="n">macroexpand</span><span class="o">(</span><span class="n">form</span><span class="o">);</span>
</span><span class='line'><span class="k">if</span><span class="o">(</span><span class="n">form</span> <span class="k">instanceof</span> <span class="n">IPersistentCollection</span> <span class="o">&amp;&amp;</span> <span class="n">Util</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">RT</span><span class="o">.</span><span class="na">first</span><span class="o">(</span><span class="n">form</span><span class="o">),</span> <span class="n">DO</span><span class="o">))</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>  <span class="k">for</span><span class="o">(</span><span class="n">ISeq</span> <span class="n">s</span> <span class="o">=</span> <span class="n">RT</span><span class="o">.</span><span class="na">next</span><span class="o">(</span><span class="n">form</span><span class="o">);</span> <span class="n">s</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">;</span> <span class="n">s</span> <span class="o">=</span> <span class="n">RT</span><span class="o">.</span><span class="na">next</span><span class="o">(</span><span class="n">s</span><span class="o">))</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>      <span class="n">compile1</span><span class="o">(</span><span class="n">gen</span><span class="o">,</span> <span class="n">objx</span><span class="o">,</span> <span class="n">RT</span><span class="o">.</span><span class="na">first</span><span class="o">(</span><span class="n">s</span><span class="o">));</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>  <span class="n">Expr</span> <span class="n">expr</span> <span class="o">=</span> <span class="n">analyze</span><span class="o">(</span><span class="n">C</span><span class="o">.</span><span class="na">EVAL</span><span class="o">,</span> <span class="n">form</span><span class="o">);</span>
</span><span class='line'>        <span class="o">....</span>
</span><span class='line'>  <span class="n">expr</span><span class="o">.</span><span class="na">emit</span><span class="o">(</span><span class="n">C</span><span class="o">.</span><span class="na">EXPRESSION</span><span class="o">,</span> <span class="n">objx</span><span class="o">,</span> <span class="n">gen</span><span class="o">);</span>
</span><span class='line'>  <span class="n">expr</span><span class="o">.</span><span class="na">eval</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>analyze</code> function we see on the <code>else</code> branch does the proper <code>s-expr</code> analyzing which emits and evals itself afterwards, more on analyzing ahead.</p>

<h3>Load Entry Point</h3>

<p>The <code>load</code> function gets called any time we do a <code>require</code> for a not pre-compiled namespace.</p>

<figure class='code'><figcaption><span>load</span><a href='https://github.com/clojure/clojure/blob/1.5.x/src/jvm/clojure/lang/Compiler.java#L7032'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">Object</span> <span class="nf">load</span><span class="o">(</span><span class="n">Reader</span> <span class="n">rdr</span><span class="o">,</span> <span class="n">String</span> <span class="n">sourcePath</span><span class="o">,</span> <span class="n">String</span> <span class="n">sourceName</span><span class="o">)</span> <span class="o">{</span>
</span></code></pre></td></tr></table></div></figure>


<p>For instance, say we do a require for the <code>clojure.core.reducers</code> namespace:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">require</span> <span class="o">&#39;</span><span class="p">[</span><span class="nv">clojure.core.reducers</span> <span class="ss">:as</span> <span class="nv">r</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>clj</code> file will be read as a stream in the <code>loadResourceScript</code> function and passed as the first <code>rdr</code> parameter of the <code>load</code> function.</p>

<p>You see the <code>load</code> function has a pretty similar read form and eval loop as the one we saw in the compile function.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">for</span><span class="o">(</span><span class="n">Object</span> <span class="n">r</span> <span class="o">=</span> <span class="n">LispReader</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">pushbackReader</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="n">EOF</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span> <span class="n">r</span> <span class="o">!=</span> <span class="n">EOF</span><span class="o">;</span>
</span><span class='line'><span class="n">r</span> <span class="o">=</span> <span class="n">LispReader</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">pushbackReader</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="n">EOF</span><span class="o">,</span> <span class="kc">false</span><span class="o">))</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="n">ret</span> <span class="o">=</span> <span class="n">eval</span><span class="o">(</span><span class="n">r</span><span class="o">,</span><span class="kc">false</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Instead of calling <code>compile1</code> calling <code>eval</code>, which is our next entry point.</p>

<h3>Eval Entry Point</h3>

<p><code>eval</code> is the <code>e</code> in REPL, anything to be dynamically evaluated goes through the <code>eval</code> function.</p>

<p>For instance if you type <code>(+ 1 1)</code> on your REPL that expression will be parsed, analyzed and evaluated starting on the <code>eval</code> function.</p>

<figure class='code'><figcaption><span>eval</span><a href='https://github.com/clojure/clojure/blob/1.5.x/src/jvm/clojure/lang/Compiler.java#L6585'>Compiler.java  </a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">Object</span> <span class="nf">eval</span><span class="o">(</span><span class="n">Object</span> <span class="n">form</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">freshLoader</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you see eval receives a <code>form</code> by parameter, since knows nothing about files nor namespaces.</p>

<p><code>eval</code> is just straightforward analyzing of the form, and there&#8217;s not a emit here. This is the <em>simplified</em> version of the function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">form</span> <span class="o">=</span> <span class="n">macroexpand</span><span class="o">(</span><span class="n">form</span><span class="o">);</span>
</span><span class='line'><span class="n">Expr</span> <span class="n">expr</span> <span class="o">=</span> <span class="n">analyze</span><span class="o">(</span><span class="n">C</span><span class="o">.</span><span class="na">EVAL</span><span class="o">,</span> <span class="n">form</span><span class="o">);</span>
</span><span class='line'><span class="k">return</span> <span class="n">expr</span><span class="o">.</span><span class="na">eval</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<h2>The reader</h2>

<p>Languages with more complicated syntaxes separate the Lexer and Parser into two different pieces, like most Lisps, Clojure combines these two into just a <code>Reader</code>.</p>

<p>The reader is pretty much self contained in <code>LispReader.java</code> and its main responsibility is given a stream, return the properly <em>tokenized</em> s-expressions.</p>

<p>The reader dispatches reading to specialized functions and classes when a particular token is found, for instance <code>(</code> dispatches to <code>ListReader</code> class, digits dispatch to the <code>readNumber</code> function and so on.</p>

<p>Much of the list and vector reading classes(<code>VectorReader</code>, <code>MapReader</code>, <code>ListReader</code>, etc) rely on the more generic <code>readDelimitedList</code> function which receives the particular list separator as parameter.</p>

<figure class='code'><figcaption><span>Reader classes for each special character in LispReader</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">macros</span><span class="o">[</span><span class="sc">&#39;&quot;&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringReader</span><span class="o">();</span>
</span><span class='line'><span class="n">macros</span><span class="o">[</span><span class="sc">&#39;;&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CommentReader</span><span class="o">();</span>
</span><span class='line'><span class="n">macros</span><span class="o">[</span><span class="sc">&#39;\&#39;&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">WrappingReader</span><span class="o">(</span><span class="n">QUOTE</span><span class="o">);</span>
</span><span class='line'><span class="n">macros</span><span class="o">[</span><span class="sc">&#39;@&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">WrappingReader</span><span class="o">(</span><span class="n">DEREF</span><span class="o">);</span><span class="c1">//new DerefReader();</span>
</span><span class='line'><span class="n">macros</span><span class="o">[</span><span class="sc">&#39;^&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MetaReader</span><span class="o">();</span>
</span><span class='line'><span class="n">macros</span><span class="o">[</span><span class="sc">&#39;`&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SyntaxQuoteReader</span><span class="o">();</span>
</span><span class='line'><span class="n">macros</span><span class="o">[</span><span class="sc">&#39;~&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">UnquoteReader</span><span class="o">();</span>
</span><span class='line'><span class="n">macros</span><span class="o">[</span><span class="sc">&#39;(&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ListReader</span><span class="o">();</span>
</span><span class='line'><span class="n">macros</span><span class="o">[</span><span class="sc">&#39;)&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">UnmatchedDelimiterReader</span><span class="o">();</span>
</span><span class='line'><span class="n">macros</span><span class="o">[</span><span class="sc">&#39;[&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">VectorReader</span><span class="o">();</span>
</span><span class='line'><span class="n">macros</span><span class="o">[</span><span class="sc">&#39;]&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">UnmatchedDelimiterReader</span><span class="o">();</span>
</span><span class='line'><span class="n">macros</span><span class="o">[</span><span class="sc">&#39;{&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MapReader</span><span class="o">();</span>
</span><span class='line'><span class="n">macros</span><span class="o">[</span><span class="sc">&#39;}&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">UnmatchedDelimiterReader</span><span class="o">();</span>
</span><span class='line'><span class="c1">//   macros[&#39;|&#39;] = new ArgVectorReader();</span>
</span><span class='line'><span class="n">macros</span><span class="o">[</span><span class="sc">&#39;\\&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CharacterReader</span><span class="o">();</span>
</span><span class='line'><span class="n">macros</span><span class="o">[</span><span class="sc">&#39;%&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArgReader</span><span class="o">();</span>
</span><span class='line'><span class="n">macros</span><span class="o">[</span><span class="sc">&#39;#&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DispatchReader</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is important because the reader is responsible for reading line and column number information, and establishing a relationship between tokens read and locations in the file.</p>

<p>One of the main drawbacks of the reader used by the compiler is that much of the line and column number information is lost, that&#8217;s one of the reasons <a href="blog.guillermowinkler.com/blog/2014/04/13/decompiling-clojure-i/">we saw in our earlier post</a> that for a 7 line function only one line was properly mapped, interestingly, the line corresponding to the outter s-expression.</p>

<p>We will have to modify this reader if we want proper debugging information for our debugger.</p>

<h2>The analyzer</h2>

<p>The analyzer is the part of the compiler that translates your <code>s-expressions</code> into proper things to be emitted.</p>

<p>We&#8217;re already familiar with the REPL, in the <code>eval</code> function <code>analyze</code> and <code>emit</code> are combined in a single step, but internally there&#8217;s a two step process.</p>

<p>First, our parsed but meaningless code needs to be translated into meaningful expressions.</p>

<p>In the case of the Clojure compiler all expressions implement the <code>Expr</code> interface:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">interface</span> <span class="nc">Expr</span><span class="o">{</span>
</span><span class='line'>  <span class="n">Object</span> <span class="nf">eval</span><span class="o">()</span> <span class="o">;</span>
</span><span class='line'>  <span class="kt">void</span> <span class="nf">emit</span><span class="o">(</span><span class="n">C</span> <span class="n">context</span><span class="o">,</span> <span class="n">ObjExpr</span> <span class="n">objx</span><span class="o">,</span> <span class="n">GeneratorAdapter</span> <span class="n">gen</span><span class="o">);</span>
</span><span class='line'>  <span class="kt">boolean</span> <span class="nf">hasJavaClass</span><span class="o">()</span> <span class="o">;</span>
</span><span class='line'>  <span class="n">Class</span> <span class="nf">getJavaClass</span><span class="o">()</span> <span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Much of the <a href="http://clojure.org/special_forms">Clojure special forms</a> are handled here, <code>IfExpr</code>, <code>LetExpr</code>, <code>LetFnExpr</code>, <code>RecurExpr</code>, <code>FnExpr</code>, <code>DefExpr</code>, <code>CaseExpr</code>, you get the idea.</p>

<p>Those are nested classes inside the Compiler class, and for you visualize how many of those special cases exist inside the compiler, I took this picture for you:</p>

<p><img class="center" src="http://guilespi.github.com/images/blog/analyze-expr.png" width="380" height="280" title="Analyzer" alt="Analyzer"></p>

<p>As you would expect for a properly modularized piece of software, each expression knows how to parse itself, eval itself, and emit itself.</p>

<p>The analyze function is a switch on the type of the form to be analyzed, just for you to get a taste:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="n">Expr</span> <span class="nf">analyze</span><span class="o">(</span><span class="n">C</span> <span class="n">context</span><span class="o">,</span> <span class="n">Object</span> <span class="n">form</span><span class="o">,</span> <span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'><span class="o">...</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span><span class="o">(</span><span class="n">fclass</span> <span class="o">==</span> <span class="n">Symbol</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="nf">analyzeSymbol</span><span class="o">((</span><span class="n">Symbol</span><span class="o">)</span> <span class="n">form</span><span class="o">);</span>
</span><span class='line'><span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">fclass</span> <span class="o">==</span> <span class="n">Keyword</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="nf">registerKeyword</span><span class="o">((</span><span class="n">Keyword</span><span class="o">)</span> <span class="n">form</span><span class="o">);</span>
</span><span class='line'><span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">form</span> <span class="k">instanceof</span> <span class="n">Number</span><span class="o">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">NumberExpr</span><span class="o">.</span><span class="na">parse</span><span class="o">((</span><span class="n">Number</span><span class="o">)</span> <span class="n">form</span><span class="o">);</span>
</span><span class='line'><span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">fclass</span> <span class="o">==</span> <span class="n">String</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">new</span> <span class="nf">StringExpr</span><span class="o">(((</span><span class="n">String</span><span class="o">)</span> <span class="n">form</span><span class="o">).</span><span class="na">intern</span><span class="o">());</span>
</span><span class='line'><span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>And there&#8217;s special handling for the special forms which are keyed by Symbol on the same file.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">IPersistentMap</span> <span class="n">specials</span> <span class="o">=</span> <span class="n">PersistentHashMap</span><span class="o">.</span><span class="na">create</span><span class="o">(</span>
</span><span class='line'>      <span class="n">DEF</span><span class="o">,</span> <span class="k">new</span> <span class="n">DefExpr</span><span class="o">.</span><span class="na">Parser</span><span class="o">(),</span>
</span><span class='line'>      <span class="n">LOOP</span><span class="o">,</span> <span class="k">new</span> <span class="n">LetExpr</span><span class="o">.</span><span class="na">Parser</span><span class="o">(),</span>
</span><span class='line'>      <span class="n">RECUR</span><span class="o">,</span> <span class="k">new</span> <span class="n">RecurExpr</span><span class="o">.</span><span class="na">Parser</span><span class="o">(),</span>
</span><span class='line'>      <span class="n">IF</span><span class="o">,</span> <span class="k">new</span> <span class="n">IfExpr</span><span class="o">.</span><span class="na">Parser</span><span class="o">(),</span>
</span><span class='line'>      <span class="n">CASE</span><span class="o">,</span> <span class="k">new</span> <span class="n">CaseExpr</span><span class="o">.</span><span class="na">Parser</span><span class="o">(),</span>
</span><span class='line'>      <span class="n">LET</span><span class="o">,</span> <span class="k">new</span> <span class="n">LetExpr</span><span class="o">.</span><span class="na">Parser</span><span class="o">(),</span>
</span><span class='line'>      <span class="n">LETFN</span><span class="o">,</span> <span class="k">new</span> <span class="n">LetFnExpr</span><span class="o">.</span><span class="na">Parser</span><span class="o">(),</span>
</span><span class='line'>      <span class="n">DO</span><span class="o">,</span> <span class="k">new</span> <span class="n">BodyExpr</span><span class="o">.</span><span class="na">Parser</span><span class="o">(),</span>
</span><span class='line'>      <span class="n">FN</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span>
</span><span class='line'>      <span class="n">QUOTE</span><span class="o">,</span> <span class="k">new</span> <span class="n">ConstantExpr</span><span class="o">.</span><span class="na">Parser</span><span class="o">(),</span>
</span><span class='line'>      <span class="n">THE_VAR</span><span class="o">,</span> <span class="k">new</span> <span class="n">TheVarExpr</span><span class="o">.</span><span class="na">Parser</span><span class="o">(),</span>
</span><span class='line'>      <span class="n">IMPORT</span><span class="o">,</span> <span class="k">new</span> <span class="n">ImportExpr</span><span class="o">.</span><span class="na">Parser</span><span class="o">(),</span>
</span><span class='line'>      <span class="n">DOT</span><span class="o">,</span> <span class="k">new</span> <span class="n">HostExpr</span><span class="o">.</span><span class="na">Parser</span><span class="o">(),</span>
</span><span class='line'>      <span class="n">ASSIGN</span><span class="o">,</span> <span class="k">new</span> <span class="n">AssignExpr</span><span class="o">.</span><span class="na">Parser</span><span class="o">(),</span>
</span><span class='line'>      <span class="n">DEFTYPE</span><span class="o">,</span> <span class="k">new</span> <span class="n">NewInstanceExpr</span><span class="o">.</span><span class="na">DeftypeParser</span><span class="o">(),</span>
</span><span class='line'>      <span class="n">REIFY</span><span class="o">,</span> <span class="k">new</span> <span class="n">NewInstanceExpr</span><span class="o">.</span><span class="na">ReifyParser</span><span class="o">(),</span>
</span></code></pre></td></tr></table></div></figure>


<p>Analyze <em>will</em> return a parsed <code>Expr</code>, which is now a part of your program represented in the internal data structures of the compiler.</p>

<h2>The bytecode generator</h2>

<p>As said before it uses <a href="http://asm.ow2.org/">ASM</a> so we found the standard code stacking up visitors, annotations, methods, fields, etc.</p>

<p>I won&#8217;t enter here into specific details about ASM API since it&#8217;s properly documented somewhere else.</p>

<p>Only notice that no matter if code is eval&#8217;ed or not, JVM bytecode <em>will</em> be generated.</p>

<h2>What&#8217;s next</h2>

<p>One of the reasons I ended up here when I started working on the debugger was to see if by any means, I could <em>add</em> better line number references to the
current Clojure compiler.</p>

<p>As said before and as we saw here, the Java Clojure Compiler is not exactly built for extensibility.</p>

<p>The option I had left, was to modify the line numbers and other debugging information at runtime, and that&#8217;s what I will show you on the next post.</p>

<p>I will properly synchronize Clojure source code with JVM Bytecode, meaning I will synchronize code trees, that way I will not only add proper line references, but I will know
which bytecode corresponds with which <code>s-expression</code> in your source.</p>

<p>Doing Clojure I usually end up with lines of code looking like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nb">map </span><span class="p">(</span><span class="nb">comp first rest </span><span class="p">(</span><span class="nb">partial filter </span><span class="nv">identity</span><span class="p">))</span> <span class="p">(</span><span class="nf">split-line</span> <span class="nv">line</span> <span class="nv">separator</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>What use do I have for a <em>line base debugger</em> with that code??</p>

<p>I want an <strong>s-expression based debugger</strong>, don&#8217;t you?</p>

<p>One more reason we have to envy <a href="http://racket-lang.org/">Dr Racket</a>, whose debugger already knows about them.</p>

<p><img class="center" src="http://guilespi.github.com/images/blog/racket-debug.png" width="580" height="480" title="Racket Debugger" alt="Racket Debugger"></p>

<p>Stay tuned to see it working on the JVM.</p>

<p>Meanwhile, <a href="http://www.twitter.com/guilespi">I&#8217;m guilespi</a> on Twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Decompiling Clojure I]]></title>
    <link href="http://guilespi.github.com/blog/2014/04/13/decompiling-clojure-i/"/>
    <updated>2014-04-13T17:19:00-03:00</updated>
    <id>http://guilespi.github.com/blog/2014/04/13/decompiling-clojure-i</id>
    <content type="html"><![CDATA[<p>This is the first in a series of articles about decompiling Clojure, that is, going from JVM bytecode created by the Clojure compiler, to some kind of higher level language, not necessarily Clojure.</p>

<p>This article was written in the scope of a larger project, building a better Clojure debugger, which I&#8217;ll probably blog about in the future.</p>

<p>These articles are going to build form the ground up, so you may skip forward if you find some of the stuff obvious.</p>

<h1>Clojure targets the JVM</h1>

<p>To be more precise, there is a <a href="https://github.com/clojure/clojure">Clojure compiler targeting the JVM</a>, there&#8217;s also one <a href="https://github.com/clojure/clojurescript">targeting Javascript</a>, one for <a href="https://github.com/richhickey/clojure-clr">the CLR</a> and there are some less known projects <a href="https://github.com/raph-amiard/clojurescript-lua">targeting lua</a> or <a href="https://github.com/schani/clojurec">even C</a>.</p>

<p>But the official <a href="http://clojure.com/">clojure core</a> efforts are mainly on the JVM, which stands for <em>Java Virtual Machine</em>.</p>

<p>That means when you write some clojure code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">hello-world</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">println </span><span class="s">&quot;Hello World&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>You won&#8217;t get a native binary, for instance a x86 <a href="http://msdn.microsoft.com/en-us/magazine/cc301805.aspx">PE</a> or <a href="http://www.skyfree.org/linux/references/ELF_Format.pdf">ELF</a> file, although it&#8217;s entirely possible to write a compiler to do it.</p>

<p>When you target a particular runtime though, you usually get a different set of functions to interact with the host, there&#8217;s a lot of language primitives just to deal with <a href="http://clojure.org/java_interop">Java inter operation</a> which do not
migrate easily to other runtimes or virtual machines.</p>

<h1>The JVM is about Java, or is it?</h1>

<p>This doesn&#8217;t mean that the JVM can <em>only</em> run programs written in Java.</p>

<p>In fact, Clojure doesn&#8217;t use Java as an intermediate language before compiling, the Clojure compiler for the JVM generates <a href="http://docs.oracle.com/javase/specs/jvms/se7/html/jvms-6.html">JVM bytecode</a> directly <a href="http://asm.ow2.org/">using the ASM library</a>.</p>

<p>So, what does it mean the JVM is about Java if you can compile directly to bytecode without a mandatory visit to <a href="http://steve-yegge.blogspot.com/2006/03/execution-in-kingdom-of-nouns.html">the kingdom of nouns</a>?</p>

<p>Besides its name, the JVM was designed by James Gosling in 1992 to support the <a href="http://docs.oracle.com/javase/specs/jvms/se5.0/html/Preface.doc.html">Oak Programming Language</a>, before evolving into its current form.</p>

<p>Its main responsibility is to achieve independence from hardware and operating system, and like a real machine, it has an instruction set and manipulates memory at runtime, and the truth is the JVM knows nothing about the Java Programming Language, it only knows of a particularly binary format, <a href="http://docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html">the class file format</a>, which contains bytecode and other information.</p>

<p>So, any programming language with features that can be expressed in terms of a valid class file, can by hosted on the JVM.</p>

<p>But the truth is that the class file format, maintains a lot of resemblance with concepts appearing in Java, or any other OO programming language as a matter of fact, to name a few:</p>

<ul>
<li>A <code>class</code> file corresponds to a Class</li>
<li>A <code>class</code> file has members</li>
<li>A <code>class</code> file has methods</li>
<li>Methods of the <code>class</code> file can be static or instance methods</li>
<li>There are primitive types and reference types, that can be stored in variables</li>
<li>Exceptions are an instance or subclass of <code>Throwable</code></li>
<li>etc</li>
</ul>


<p>So, we can say the JVM is <strong>not</strong> agnostic regarding the concepts supported by the language, as <a href="http://en.wikipedia.org/wiki/Lisp_Machines">the LISP machines</a> were not agnostic either.</p>

<h1>Clojure compiles to bytecode</h1>

<p>So we have a language like Clojure, with many concepts not easily mapped to the JVM spec, but that it was mapped none the less, how?</p>

<h2>Namespaces do not exist</h2>

<p>Maybe you think Clojure namespaces correspond to a <strong>class</strong>, and each method in the namespace is mapped to a method in the class.</p>

<p>Well, that is not the case.</p>

<p>Namespaces <a href="http://www.infoq.com/presentations/What-Sucks-about-Clojure-and-Why-You-ll-Love-It-Anyway">were criticized before</a> for being tough, and the truth is they&#8217;re used for proper modularity,
but do not map to an entity in the JVM. They&#8217;re equivalent to java packages or modules in other languages.</p>

<h2>Each function is a class</h2>

<p>Each function in your namespace will get compiled to a complete different class. That&#8217;s something you can easily confirm listing the files under <code>target/classes</code> in a leiningen project directory.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">git</span><span class="err">:</span><span class="p">(</span><span class="nf">master</span><span class="p">)</span> <span class="err">✗</span> <span class="nv">ls</span> <span class="nv">target/classes/</span>
</span><span class='line'>
</span><span class='line'><span class="nv">config$fn__292.class</span>
</span><span class='line'><span class="nv">routes__init.class</span>
</span><span class='line'><span class="nv">config$loading__4910__auto__.class</span>
</span><span class='line'><span class="nv">config$read_environment$fn__300.class</span>
</span><span class='line'><span class="nv">config$read_environment.class</span>
</span><span class='line'><span class="nv">config$read_properties$iter__304__308$fn__309$fn__310.class</span>
</span><span class='line'><span class="nv">server</span>
</span><span class='line'><span class="nv">server$_main.class</span>
</span><span class='line'><span class="nv">server$_main$fn__4006.class</span>
</span><span class='line'><span class="nv">server$fn__3939.class</span>
</span></code></pre></td></tr></table></div></figure>


<p>You will find a <code>.class</code> file for each function you have defined, <code>namespace$function.class</code> being the standard syntax.</p>

<h2>Each anonymous function is also a class</h2>

<p>As you saw in the previous listing, there are many functions with numbers like <code>config$fn__292.class</code>.</p>

<p>Those correspond to anonymous functions that get their own class when compiled, so if you have this code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nb">map </span><span class="o">#</span><span class="p">(</span><span class="nb">+ </span><span class="mi">34</span> <span class="nv">%</span><span class="p">)</span> <span class="p">(</span><span class="nb">range </span><span class="mi">10</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>You should expect a <code>.class</code> file for the anonymous function <code>#(+ 34 %)</code>.</p>

<h2><em>class</em> files don&#8217;t need to be on disk</h2>

<p>Many times you&#8217;ll find the <code>class</code> files on disk, but it doesn&#8217;t have to be that way.</p>

<p>In many circumstances we&#8217;re going to be modifying the <code>class</code> structure on runtime, or creating new <code>class</code> structures to be run, entirely on memory. Even the compiler can <code>eval</code> some code
compiling to memory without creating a <code>class</code> file on disk.</p>

<h1>What does bytecode look like?</h1>

<p>For the first example, I selected a real simple clojure function</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">test-multi-let</span>
</span><span class='line'>  <span class="p">[]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">a</span> <span class="mi">1</span>
</span><span class='line'>        <span class="nv">b</span> <span class="mi">2</span>
</span><span class='line'>        <span class="nv">c</span> <span class="mi">3</span>
</span><span class='line'>        <span class="nv">b</span> <span class="mi">4</span><span class="p">]</span>
</span><span class='line'>    <span class="mi">9</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>To explore the bytecode we will use <code>javap</code>, simple, but does the job:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">javap</span> <span class="nv">-c</span> <span class="nv">target/classes/debugee/test</span><span class="sc">\$</span><span class="nv">test_multi_let.class</span>
</span><span class='line'><span class="nv">...</span>
</span><span class='line'><span class="nv">public</span> <span class="nv">static</span> <span class="p">{}</span><span class="c1">;</span>
</span><span class='line'>    <span class="nv">Code</span><span class="err">:</span>
</span><span class='line'>       <span class="mi">0</span><span class="err">:</span> <span class="nv">lconst_1</span>
</span><span class='line'>       <span class="mi">1</span><span class="err">:</span> <span class="nv">invokestatic</span>  <span class="o">#</span><span class="mi">19</span>                 <span class="nv">//</span> <span class="nv">Method</span> <span class="nv">java/lang/Long.valueOf</span><span class="err">:</span><span class="p">(</span><span class="nf">J</span><span class="p">)</span><span class="nv">Ljava/lang/Long</span><span class="c1">;</span>
</span><span class='line'>       <span class="mi">4</span><span class="err">:</span> <span class="nv">putstatic</span>     <span class="o">#</span><span class="mi">21</span>                 <span class="nv">//</span> <span class="nv">Field</span> <span class="nv">const__0</span><span class="ss">:Ljava/lang/Object</span><span class="c1">;</span>
</span><span class='line'>       <span class="mi">7</span><span class="err">:</span> <span class="nv">ldc2_w</span>        <span class="o">#</span><span class="mi">22</span>                 <span class="nv">//</span> <span class="nb">long </span><span class="mi">2</span><span class="nv">l</span>
</span><span class='line'>      <span class="mi">10</span><span class="err">:</span> <span class="nv">invokestatic</span>  <span class="o">#</span><span class="mi">19</span>                 <span class="nv">//</span> <span class="nv">Method</span> <span class="nv">java/lang/Long.valueOf</span><span class="err">:</span><span class="p">(</span><span class="nf">J</span><span class="p">)</span><span class="nv">Ljava/lang/Long</span><span class="c1">;</span>
</span><span class='line'>      <span class="mi">13</span><span class="err">:</span> <span class="nv">putstatic</span>     <span class="o">#</span><span class="mi">25</span>                 <span class="nv">//</span> <span class="nv">Field</span> <span class="nv">const__1</span><span class="ss">:Ljava/lang/Object</span><span class="c1">;</span>
</span><span class='line'>      <span class="mi">16</span><span class="err">:</span> <span class="nv">ldc2_w</span>        <span class="o">#</span><span class="mi">26</span>                 <span class="nv">//</span> <span class="nb">long </span><span class="mi">3</span><span class="nv">l</span>
</span><span class='line'>      <span class="mi">19</span><span class="err">:</span> <span class="nv">invokestatic</span>  <span class="o">#</span><span class="mi">19</span>                 <span class="nv">//</span> <span class="nv">Method</span> <span class="nv">java/lang/Long.valueOf</span><span class="err">:</span><span class="p">(</span><span class="nf">J</span><span class="p">)</span><span class="nv">Ljava/lang/Long</span><span class="c1">;</span>
</span><span class='line'>      <span class="mi">22</span><span class="err">:</span> <span class="nv">putstatic</span>     <span class="o">#</span><span class="mi">29</span>                 <span class="nv">//</span> <span class="nv">Field</span> <span class="nv">const__2</span><span class="ss">:Ljava/lang/Object</span><span class="c1">;</span>
</span><span class='line'>      <span class="mi">25</span><span class="err">:</span> <span class="nv">ldc2_w</span>        <span class="o">#</span><span class="mi">30</span>                 <span class="nv">//</span> <span class="nb">long </span><span class="mi">4</span><span class="nv">l</span>
</span><span class='line'>      <span class="mi">28</span><span class="err">:</span> <span class="nv">invokestatic</span>  <span class="o">#</span><span class="mi">19</span>                 <span class="nv">//</span> <span class="nv">Method</span> <span class="nv">java/lang/Long.valueOf</span><span class="err">:</span><span class="p">(</span><span class="nf">J</span><span class="p">)</span><span class="nv">Ljava/lang/Long</span><span class="c1">;</span>
</span><span class='line'>      <span class="mi">31</span><span class="err">:</span> <span class="nv">putstatic</span>     <span class="o">#</span><span class="mi">33</span>                 <span class="nv">//</span> <span class="nv">Field</span> <span class="nv">const__3</span><span class="ss">:Ljava/lang/Object</span><span class="c1">;</span>
</span><span class='line'>      <span class="mi">34</span><span class="err">:</span> <span class="nv">ldc2_w</span>        <span class="o">#</span><span class="mi">34</span>                 <span class="nv">//</span> <span class="nb">long </span><span class="mi">9</span><span class="nv">l</span>
</span><span class='line'>      <span class="mi">37</span><span class="err">:</span> <span class="nv">invokestatic</span>  <span class="o">#</span><span class="mi">19</span>                 <span class="nv">//</span> <span class="nv">Method</span> <span class="nv">java/lang/Long.valueOf</span><span class="err">:</span><span class="p">(</span><span class="nf">J</span><span class="p">)</span><span class="nv">Ljava/lang/Long</span><span class="c1">;</span>
</span><span class='line'>      <span class="mi">40</span><span class="err">:</span> <span class="nv">putstatic</span>     <span class="o">#</span><span class="mi">37</span>                 <span class="nv">//</span> <span class="nv">Field</span> <span class="nv">const__4</span><span class="ss">:Ljava/lang/Object</span><span class="c1">;</span>
</span><span class='line'>      <span class="mi">43</span><span class="err">:</span> <span class="nv">return</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&#8217;ve removed some extra information such as variable tables, we&#8217;re going to be visiting those later.</p>

<p>What you see here are JVM <em>assembly instructions</em>, just a subset of the JVM instruction set, generated by the Clojure compiler when feed with the sample function above.</p>

<p>Before we get into more details, let me show you how that code looks after a basic decompiler pass:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="mi">0</span><span class="ss">:a</span> <span class="nb">= </span><span class="mi">1</span>
</span><span class='line'><span class="mi">2</span><span class="ss">:b</span> <span class="nb">= </span><span class="mi">2</span>
</span><span class='line'><span class="mi">6</span><span class="ss">:c</span> <span class="nb">= </span><span class="mi">3</span>
</span><span class='line'><span class="mi">11</span><span class="ss">:b</span> <span class="nb">= </span><span class="mi">4</span>
</span><span class='line'><span class="mi">16</span><span class="ss">:RETURN</span> <span class="mi">9</span>
</span></code></pre></td></tr></table></div></figure>


<p>Prettier uh?</p>

<p>That is until you decompile this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">test-if</span>
</span><span class='line'>  <span class="p">[]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">= </span><span class="p">(</span><span class="nb">inc </span><span class="mi">1</span><span class="p">)</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>    <span class="mi">8</span>
</span><span class='line'>    <span class="mi">9</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>And get this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="mi">0</span><span class="ss">:IF</span> <span class="p">(</span><span class="mi">2</span> <span class="nv">!=</span> <span class="nv">clojure.lang.Numbers.inc</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span> <span class="nv">GOTO</span> <span class="mi">11</span> <span class="nv">ELSE</span> <span class="nv">GOTO</span> <span class="mi">18</span>
</span><span class='line'><span class="mi">11</span><span class="ss">:RETURN</span> <span class="mi">9</span>
</span><span class='line'><span class="mi">18</span><span class="ss">:RETURN</span> <span class="mi">8</span>
</span></code></pre></td></tr></table></div></figure>


<p>Who was the moron that put a <a href="http://groups.engin.umd.umich.edu/CIS/course.des/cis400/basic/basic.html"><strong>BASIC</strong></a> in my Clojure!</p>

<p>Ain&#8217;t it?</p>

<p>Keep reading&#8230; there&#8217;s more to be seen ahead.</p>

<h1>The operand stack</h1>

<p>I won&#8217;t dwell into many details about each JVM instruction and how that translates to something resembling Clojure, or Basic for that matter, but there&#8217;s one thing worth of mention, and that is the operand stack.</p>

<h2>Frames</h2>

<p>A new Frame is created each time a method is invoked and destroyed when the method completes, whether that information is normal or abrupt (throws an uncaught exception), frames are allocated in the JVM stack and have its own array of local variables and its own operand stack.</p>

<p>If you set a breakpoint on your code, each different entry in your thread callstack, is a frame.</p>

<h2>Stack</h2>

<p>The operand stack is a last-in-first-out (LIFO) stack and its empty when the Frame that contains it is created, and the JVM provides instructions for loading constants or variables into the operand stack, and to put values from the operand stack in variables.</p>

<p>The operand stack is usually used to prepare parameters to be passed to methods and to receive method results, <a href="http://markfaction.wordpress.com/2012/07/15/stack-based-vs-register-based-virtual-machine-architecture-and-the-dalvik-vm/">as opposed to using registers to do it</a>.</p>

<p>So you should expect something along these lines:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">f</span><span class="p">(</span><span class="nf">a</span>, <span class="nv">b</span>, <span class="nv">c</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nv">=&gt;</span> <span class="nv">compiling</span> <span class="nv">to</span>
</span><span class='line'>
</span><span class='line'><span class="nv">push</span> <span class="nv">a</span>
</span><span class='line'><span class="nv">push</span> <span class="nv">b</span>
</span><span class='line'><span class="nv">push</span> <span class="nv">c</span>
</span><span class='line'><span class="nv">call</span> <span class="nv">f</span>
</span></code></pre></td></tr></table></div></figure>


<p>So looking again at the bytecode of the previous function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">test-if</span>
</span><span class='line'>  <span class="p">[]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">= </span><span class="p">(</span><span class="nb">inc </span><span class="mi">1</span><span class="p">)</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>    <span class="mi">8</span>
</span><span class='line'>    <span class="mi">9</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">public</span> <span class="nv">java.lang.Object</span> <span class="nv">invoke</span><span class="p">()</span><span class="c1">;</span>
</span><span class='line'>    <span class="nv">Code</span><span class="err">:</span>
</span><span class='line'>       <span class="mi">0</span><span class="err">:</span> <span class="nv">lconst_1</span>
</span><span class='line'>       <span class="mi">1</span><span class="err">:</span> <span class="nv">invokestatic</span>  <span class="o">#</span><span class="mi">63</span>                 <span class="nv">//</span> <span class="nv">Method</span> <span class="nv">clojure/lang/Numbers.inc</span><span class="err">:</span><span class="p">(</span><span class="nf">J</span><span class="p">)</span><span class="nv">J</span>
</span><span class='line'>       <span class="mi">4</span><span class="err">:</span> <span class="nv">ldc2_w</span>        <span class="o">#</span><span class="mi">42</span>                 <span class="nv">//</span> <span class="nb">long </span><span class="mi">2</span><span class="nv">l</span>
</span><span class='line'>       <span class="mi">7</span><span class="err">:</span> <span class="nv">lcmp</span>
</span><span class='line'>       <span class="mi">8</span><span class="err">:</span> <span class="nv">ifne</span>          <span class="mi">18</span>
</span><span class='line'>      <span class="mi">11</span><span class="err">:</span> <span class="nv">getstatic</span>     <span class="o">#</span><span class="mi">49</span>                 <span class="nv">//</span> <span class="nv">Field</span> <span class="nv">const__4</span><span class="ss">:Ljava/lang/Object</span><span class="c1">;</span>
</span><span class='line'>      <span class="mi">14</span><span class="err">:</span> <span class="nv">goto</span>          <span class="mi">21</span>
</span><span class='line'>      <span class="mi">17</span><span class="err">:</span> <span class="nv">pop</span>
</span><span class='line'>      <span class="mi">18</span><span class="err">:</span> <span class="nv">getstatic</span>     <span class="o">#</span><span class="mi">53</span>                 <span class="nv">//</span> <span class="nv">Field</span> <span class="nv">const__5</span><span class="ss">:Ljava/lang/Object</span><span class="c1">;</span>
</span><span class='line'>      <span class="mi">21</span><span class="err">:</span> <span class="nv">areturn</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can make ourselves an interpretation about what&#8217;s going on&#8230;</p>

<p><code>lconst_1</code> is pushing the constant value <code>1</code> into the stack, then calling a static method with <code>invokestatic</code>, as you&#8217;ve already guessed that&#8217;s the <code>clojure.lang.Numbers.inc(1)</code> we saw on the <em>basic</em> decompiler earlier.</p>

<p>Then <code>ld2_w</code> loads the value <code>2</code> into the stack and <code>lcmp</code> will compare it against the function result, <code>ifne</code> tests for non equality and jumps to line <code>18</code> if values differ.</p>

<p>One thing to consider here is that each entry on the operand stack can hold a value of any JVM type, and those must be operated in ways appropriate to their types, so many operations have a different operation code according to the type they&#8217;re handling.</p>

<p>So looking at this example from the JVM specification, we see the operations are prefixed with a <code>d</code> since they operate on <code>double</code> values.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">Method</span> <span class="nb">double </span><span class="nv">doubleLocals</span><span class="p">(</span><span class="nf">double</span>,<span class="nv">double</span><span class="p">)</span>
</span><span class='line'><span class="mi">0</span> <span class="nv">dload_1</span> <span class="nv">//</span> <span class="nv">First</span> <span class="nv">argument</span> <span class="nv">in</span> <span class="nv">local</span> <span class="nv">variables</span> <span class="mi">1</span> <span class="nb">and </span><span class="mi">2</span>
</span><span class='line'><span class="mi">1</span> <span class="nv">dload_3</span> <span class="nv">//</span> <span class="nv">Second</span> <span class="nv">argument</span> <span class="nv">in</span> <span class="nv">local</span> <span class="nv">variables</span> <span class="mi">3</span> <span class="nb">and </span><span class="mi">4</span>
</span><span class='line'><span class="mi">2</span> <span class="nv">dadd</span>
</span><span class='line'><span class="mi">3</span> <span class="nv">dreturn</span>
</span></code></pre></td></tr></table></div></figure>


<p>Which as you may have guessed, is adding double values <code>1</code> and <code>3</code>.</p>

<h1>JVM auxiliary information</h1>

<p>The JVM <code>class</code> format has support for some extra information that can be used for debugging purposes, some of which you can get rid from your files if you want.</p>

<p>Among those we find <a href="http://docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html#jvms-4.7.12">the LineNumberTable attribute</a> and the <a href="http://docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html#jvms-4.7.13">the LocalVariableTable attribute</a>, which may be used by debuggers to determine the value of a given local variable during the execution of a method.</p>

<p>According to the jvm spec, the table has the following structure inside the <code>class</code> file format</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">LocalVariableTable_attribute</span> <span class="p">{</span>
</span><span class='line'>       <span class="nv">u2</span> <span class="nv">attribute_name_index</span><span class="c1">;</span>
</span><span class='line'>       <span class="nv">u4</span> <span class="nv">attribute_length</span><span class="c1">;</span>
</span><span class='line'>       <span class="nv">u2</span> <span class="nv">local_variable_table_length</span><span class="c1">;</span>
</span><span class='line'>       <span class="p">{</span>   <span class="nv">u2</span> <span class="nv">start_pc</span><span class="c1">;</span>
</span><span class='line'>           <span class="nv">u2</span> <span class="nv">length</span><span class="c1">;</span>
</span><span class='line'>           <span class="nv">u2</span> <span class="nv">name_index</span><span class="c1">;</span>
</span><span class='line'>           <span class="nv">u2</span> <span class="nv">descriptor_index</span><span class="c1">;</span>
</span><span class='line'>           <span class="nv">u2</span> <span class="nv">index</span><span class="c1">;</span>
</span><span class='line'>       <span class="p">}</span> <span class="nv">local_variable_table</span><span class="p">[</span><span class="nv">local_variable_table_length</span><span class="p">]</span><span class="c1">;</span>
</span><span class='line'>   <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Basically it says which variable starts at which instruction: <code>start_pc</code> and lasts for how long: <code>length</code>.</p>

<p>If we look at that table for our <code>let</code> example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">test-multi-let</span>
</span><span class='line'>  <span class="p">[]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">a</span> <span class="mi">1</span>
</span><span class='line'>        <span class="nv">b</span> <span class="mi">2</span>
</span><span class='line'>        <span class="nv">c</span> <span class="mi">3</span>
</span><span class='line'>        <span class="nv">b</span> <span class="mi">4</span><span class="p">]</span>
</span><span class='line'>    <span class="mi">9</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>We see how each variable is referenced against program counter(<code>pc</code>) line numbers (do not get confused with source file line numbers).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">LocalVariableTable</span><span class="err">:</span>
</span><span class='line'>      <span class="nv">Start</span>  <span class="nv">Length</span>  <span class="nv">Slot</span>  <span class="nv">Name</span>   <span class="nv">Signature</span>
</span><span class='line'>             <span class="mi">2</span>      <span class="mi">17</span>     <span class="mi">1</span>     <span class="nv">a</span>   <span class="nv">J</span>
</span><span class='line'>             <span class="mi">6</span>      <span class="mi">13</span>     <span class="mi">3</span>     <span class="nv">b</span>   <span class="nv">J</span>
</span><span class='line'>            <span class="mi">11</span>       <span class="mi">8</span>     <span class="mi">5</span>     <span class="nv">c</span>   <span class="nv">J</span>
</span><span class='line'>            <span class="mi">16</span>       <span class="mi">3</span>     <span class="mi">7</span>     <span class="nv">b</span>   <span class="nv">J</span>
</span><span class='line'>             <span class="mi">0</span>      <span class="mi">19</span>     <span class="mi">0</span>  <span class="nv">this</span>   <span class="nv">Ljava/lang/Object</span><span class="c1">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>One interesting thing though, is the <code>LineNumberTable</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'>  <span class="nv">public</span> <span class="nv">debugee.test$test_multi_let</span><span class="p">()</span><span class="c1">;</span>
</span><span class='line'>    <span class="nv">LineNumberTable</span><span class="err">:</span>
</span><span class='line'>      <span class="nv">line</span> <span class="mi">204</span><span class="err">:</span> <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>


<p>Which has only <strong>one</strong> line number reference, even if our function was 7 lines long, obviously that cannot be good for a debugger expecting to step over each line!</p>

<p>Next post I&#8217;ll blog about the Clojure compiler and how it ends up creating that bytecode, before visiting again the decompiling process.</p>

<p>I&#8217;m <a href="http://www.twitter.com/guilespi">guilespi</a> on Twitter, get in touch!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What's so great about Reducers?]]></title>
    <link href="http://guilespi.github.com/blog/2013/12/01/whats-so-great-about-reducers/"/>
    <updated>2013-12-01T13:25:00-02:00</updated>
    <id>http://guilespi.github.com/blog/2013/12/01/whats-so-great-about-reducers</id>
    <content type="html"><![CDATA[<p>This post is about Clojure reducers, but what makes them great are the ideas behind the implementation, which may be portable to other languages.</p>

<p>So if you&#8217;re interested in performance don&#8217;t leave just yet.</p>

<p>One of the primary motivators for the reducers library is <a href="http://vimeo.com/6624203">Guy Steele&#8217;s ICFP &#8216;09</a> talk,
and since I assume you don&#8217;t have one hour to spend verifying I&#8217;m telling you it&#8217;s worth watching,
I&#8217;ll do my best to summarize it here, which is a post you will probably scan in less than 15 seconds.</p>

<p>One of the main points of the talk is that <strong>the way we&#8217;ve been thinking about programming for the last 50 years isn&#8217;t serving us anymore</strong>.</p>

<p>Why?</p>

<p>Because good sequential code is different from good parallel code.</p>

<h1>Parallel vs. Sequential</h1>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>+------------+--------------------------------------+-------------------------------------------------------------+
</span><span class='line'>|            |              Sequential              |                          Parallel                           |
</span><span class='line'>+------------+--------------------------------------+-------------------------------------------------------------+
</span><span class='line'>| Operations | Minimizes total number of operations | Often performs redundant operations to reduce communication |
</span><span class='line'>| Space      | Minimize space usage                 | Extra space to permit temporal decoupling                   |
</span><span class='line'>| Problem    | Linear problem decomposition         | Multiway aggregation of results                             |
</span><span class='line'>+------------+--------------------------------------+-------------------------------------------------------------+</span></code></pre></td></tr></table></div></figure>


<h1>The accumulator loop</h1>

<p>How would you sum all the elements of an array?</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SUM = 0 
</span><span class='line'>DO I = 1, 1000000
</span><span class='line'>   SUM = SUM + X(I)
</span><span class='line'>END DO</span></code></pre></td></tr></table></div></figure>


<p>That&#8217;s right, the accumulator loop, you initialize the accumulator and update the thingy in each iteration step.</p>

<p>But you&#8217;re complecting how you update your sum with how you iterate your collection, ain&#8217;t it?</p>

<p>There&#8217;s a difference between <em>what</em> you do with <em>how</em> you do it. If you say <code>SUM(X)</code> it doesn&#8217;t make promises on the strategy,
it&#8217;s when you actually implement that SUM that the sequential promise is made.</p>

<p><img class="center" src="http://guilespi.github.com/images/blog/sequential_tree.png" width="480" height="580" title="'Sequential Tree'" ></p>

<p>The problem is the computation tree for the sequential strategy, if we remove the looping machinery and leave only the sums,
there&#8217;s a one million steps delay to get to the final result.</p>

<p>So what&#8217;s the tree you would like to see?</p>

<p><img class="center" src="http://guilespi.github.com/images/blog/parallel_tree.png" width="480" height="580" title="'Parallel Tree'" ></p>

<p>And what code you would need to write in order to get that tree? Functional code?</p>

<p>Think again.</p>

<p>Functional code is not the complete answer, since you can write functional code and still have the same problem.</p>

<p>Since linear linked lists are inherently sequential you may be using a reducer and be on the same spot.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nb">reduce + </span><span class="p">(</span><span class="nb">range </span><span class="mi">1</span> <span class="mi">1000000</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>We need <em>multiway decomposition</em>.</p>

<h1>Divide and conquer</h1>

<p>Rationale behind multiway decomposition is that we need a list representation that allows for binary decomposition of the list.</p>

<p><img class="center" src="http://guilespi.github.com/images/blog/tree_list_representation.png" width="480" height="580" title="'List as Tree'" ></p>

<p>You can obviously have many redundant trees representing the same conceptual list, and there&#8217;s value in redundancy since different trees have different properties.</p>

<h1>Summary</h1>

<ul>
<li>Don&#8217;t split a problem between first and rest, split in equal pieces.</li>
<li>Don&#8217;t create a null solution an successively update it, map inputs to singleton solutions and merge tree-wise.</li>
<li>Combining solutions is trickier than incremental updates.</li>
<li>Use sequential techniques near the leaves.</li>
<li>Programs organized for parallelism can be processed in parallel or sequentially.</li>
<li>Get rid of cons.</li>
</ul>


<h1>Clojure Reducers</h1>

<p>So what are Clojure reducers?</p>

<p>In short, it&#8217;s a library providing a new function <code>fold</code>, which is a parallel <code>reduce+combine</code>
that shares the same shape with the old sequence based code, main difference been you get to
provide a <code>combiner</code> function.</p>

<p>Go and read <a href="http://clojure.com/blog/2012/05/08/reducers-a-library-and-model-for-collection-processing.html">this</a> and <a href="http://clojure.com/blog/2012/05/15/anatomy-of-reducer.html">this</a> great posts by Rich Hickey.</p>

<p>Back? Ok&#8230;</p>

<p>As Rich says in his article the accumulator style is not absent but the single initial value
and the serial execution promises of <code>foldl/r</code> have been abandoned.</p>

<p>For what it&#8217;s worth, I&#8217;ve written in Clojure the <strong>Split a string into words</strong> parallel
algorithm suggested by Steele <a href="https://gist.github.com/guilespi/7458410">here</a>, performance sucks compared against
<code>clojure.string/split</code> but it&#8217;s a nice algorithm none the less.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">parallel-words</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">w</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">to-word-list</span>
</span><span class='line'>   <span class="p">(</span><span class="nf">r/fold</span> <span class="mi">100</span>
</span><span class='line'>           <span class="nv">combine-states</span>
</span><span class='line'>           <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">state</span> <span class="nv">char</span><span class="p">]</span>
</span><span class='line'>             <span class="p">(</span><span class="nf">append-state</span> <span class="nv">state</span> <span class="p">(</span><span class="nf">process-char</span> <span class="nv">char</span><span class="p">)))</span>
</span><span class='line'>           <span class="p">(</span><span class="nf">vec</span> <span class="p">(</span><span class="nb">seq </span><span class="nv">w</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>There are a couple interesting things in the code.</p>

<ul>
<li><code>combine-states</code> is the new combiner function, decides how to combine different splits</li>
<li><code>100</code> is the size when to stop splitting and do a sequential processing (calls <code>reduce</code> afterwards). Defaults to <code>512</code>.</li>
<li>The <code>fn</code> is the standard reducing function</li>
<li>The list is transformed into a <code>vector</code> before processing.</li>
</ul>


<p>Last step is just for the sake of experimentation, and has all to do with the underlying structure for vectors.</p>

<p>Both vectors and maps in Clojure are implemented as trees, which as we saw above, is one of the requirements for multiway decomposition.
There&#8217;s a <a href="http://hypirion.com/musings/understanding-persistent-vector-pt-1">great article here</a> about Clojure vectors, but key interest point is that it provides
practically <code>O(1)</code> runtime for <code>subvec</code>, which is how the vector folder <code>foldvec</code> successively splits the input vector before reaching the
sequential processing size.</p>

<p>So if you look at <a href="https://github.com/clojure/clojure/blob/master/src/clj/clojure/core/reducers.clj#L347-L367">the source code</a> only for vectors and maps actual fork/join parallelism happens, and standard reduce is called for linear lists.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'> <span class="nv">clojure.lang.IPersistentVector</span>
</span><span class='line'> <span class="p">(</span><span class="nf">coll-fold</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">v</span> <span class="nv">n</span> <span class="nv">combinef</span> <span class="nv">reducef</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">foldvec</span> <span class="nv">v</span> <span class="nv">n</span> <span class="nv">combinef</span> <span class="nv">reducef</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'> <span class="nv">Object</span>
</span><span class='line'> <span class="p">(</span><span class="nf">coll-fold</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">coll</span> <span class="nv">n</span> <span class="nv">combinef</span> <span class="nv">reducef</span><span class="p">]</span>
</span><span class='line'>  <span class="c1">;;can&#39;t fold, single reduce</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">reduce </span><span class="nv">reducef</span> <span class="p">(</span><span class="nf">combinef</span><span class="p">)</span> <span class="nv">coll</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>What I like the most about reducers is that reducer functions are curried, so you can compose them together as in:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">red</span> <span class="p">(</span><span class="nb">comp </span><span class="p">(</span><span class="nf">r/filter</span> <span class="nv">even?</span><span class="p">)</span> <span class="p">(</span><span class="nf">r/map</span> <span class="nv">inc</span><span class="p">)))</span>
</span><span class='line'><span class="p">(</span><span class="nb">reduce + </span><span class="p">(</span><span class="nf">red</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">1</span> <span class="mi">1</span> <span class="mi">2</span><span class="p">]))</span>
</span><span class='line'><span class="c1">;=&gt; 6</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&#8217;s like the utmost example of the <a href="http://www.infoq.com/presentations/Simple-Made-Easy">simple made easy</a> Hickey&#8217;s talk, where decomplecting the system, results in a much simpler but powerful
design at the same time.</p>

<p><em>I&#8217;m <a href="http://www.twitter.com/guilespi">guilespi</a> at Twitter</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Zipkin distributed tracing using Clojure]]></title>
    <link href="http://guilespi.github.com/blog/2013/11/28/zipkin-distributed-tracing-using-clojure/"/>
    <updated>2013-11-28T13:05:00-02:00</updated>
    <id>http://guilespi.github.com/blog/2013/11/28/zipkin-distributed-tracing-using-clojure</id>
    <content type="html"><![CDATA[<p>When you have a system with many moving parts it&#8217;s usually difficult trying to understand which one of those pieces is the culprit,
say for instance your home page is taking 3 seconds to render and you&#8217;re losing customers, what the hell is going on?</p>

<p>Whether you&#8217;re using Memcache, Redis, RabbitMQ or a custom distributed service, if you&#8217;re trying to scale your shit up, you probably have many pieces or boxes involved.</p>

<p>At least that&#8217;s what happens <a href="http://highscalability.com/blog/2013/7/8/the-architecture-twitter-uses-to-deal-with-150m-active-users.html">at Twitter</a>, so they&#8217;ve come up with <a href="http://twitter.github.io/zipkin/">a solution called Zipkin</a> to trace distributed operations,
that is, an operation that is potentially solved using many different nodes.</p>

<p><em>Twitter Architecture</em>
<img class="center" src="http://guilespi.github.com/images/blog/twitter_arch.png" width="680" height="780" title="'Twitter Architecture'" ></p>

<p>Having dealt with distributed logging in the past, reconstructing a distributed operation from logs,
it&#8217;s like trying to build a giant jigsaw puzzle in the middle of a Tornado.</p>

<p>The standard strategy is to propagate some <code>operation id</code> and use it anywhere you want
to track what happened, and that is the essence of what Zipkin does, but in a structured kind of way.</p>

<h1>Zipkin</h1>

<p>Zipkin was modelled after <a href="http://research.google.com/pubs/pub36356.html">Google Dapper</a> paper on distributed tracing and basically gives you two things:</p>

<ul>
<li>Trace Collection</li>
<li>Trace Querying</li>
</ul>


<p><em>Zipkin Architecture</em>
<img class="center" src="http://guilespi.github.com/images/blog/zipkin_arch.png" width="680" height="780" title="'Zipkin Architecture'" ></p>

<p>The architecture looks complex but it ain&#8217;t that much, since you can avoid using <code>Scribe</code>, <code>Cassandra</code>, <code>Zookeeper</code>
and pretty much everything related to scaling the tracing platform itself.</p>

<p>Since the trace collector <em>speaks</em> the Scribe protocol you can trace directly to the collector, and you can also use
local disk storage for tracing and avoid a distributed database like Cassandra, it&#8217;s an easy way
to get your feet wet without having to setup a cluster to peek a few traces.</p>

<h1>Tracing</h1>

<p>There are a couple entities involved in Zipkin tracing which you should know before moving forward:</p>

<p><strong>Trace</strong></p>

<p>A trace is a particular operation which may occur in many different nodes and be composed on many different Spans.</p>

<p><strong>Span</strong></p>

<p>A span represents a sub-operation for the Trace, it can be a different service or a different stage in the operation process.
Also, spans have a hierarchy, so a span can be a child of another span.</p>

<p><strong>Annotation</strong></p>

<p>The annotation is how you tag your Spans to actually know what happened, there are two type of spans:</p>

<ul>
<li>Timestamp</li>
<li>Binary</li>
</ul>


<p>Timestamp spans are used for tracing time related stuff, and Binary annotations are used to tag your operation with a particular context,
which is useful for filtering later.</p>

<p>For instance you can have a new <em>Trace</em> for each home page request, which decomposes in the <em>Memcache Span</em>
the <em>Postgres Span</em> and the <em>Computation Span</em>, each of those
with their particular <em>Start Annotation</em> and <em>Finish Annotation</em>.</p>

<h1>API</h1>

<p>Zipkin is programmed in Scala and uses thrift, since it&#8217;s assumed you&#8217;re going to have distributed operations,
the <em>official client</em> is <a href="http://twitter.github.io/finagle/">Finagle</a>, which is kind of a RPC system for the JVM, but at least for me, it&#8217;s quite ugly.</p>

<p>Main reason is that it makes you feel that if you want to use Zipkin you must use a <em>Distributed Framework</em>, which is not at all necessary.
For a moment I almost felt like <a href="http://en.wikipedia.org/wiki/Common_Object_Request_Broker_Architecture">Corba</a> and <a href="http://en.wikipedia.org/wiki/Distributed_Component_Object_Model">DCOM</a> were coming back from the grave trying to lure me into the abyss.</p>

<p>There&#8217;s also libraries for <a href="https://rubygems.org/gems/finagle-thrift">Ruby</a> and <a href="https://github.com/racker/restkin">Python</a> but none of them felt quite right to me,
for Ruby you either use Finagle or you use Thrift, but there&#8217;s no actual Zipkin library,
for Python you have <a href="https://github.com/racker/tryfer">Tryfer</a> which is good and <a href="https://github.com/racker/restkin">Restkin</a> which is a REST API on top of it.</p>

<h1>Clojure</h1>

<p>In the process of understanding what Zipkin can do for you (that means <em>me</em>) I <a href="https://github.com/guilespi/clj-zipkin">hacked a client</a> for
Clojure using <a href="https://github.com/livingsocial/clj-scribe/">clj-scribe</a> and <a href="https://github.com/xsc/thrift-clj">clj-thrift</a> which made the process almost painless.</p>

<p>It comes with a ring handler so you can trace your incoming requests out of the box.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'> <span class="p">(</span><span class="nf">require</span> <span class="o">&#39;</span><span class="p">[</span><span class="nv">clj-zipkin.middleware</span> <span class="ss">:as</span> <span class="nv">m</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'>   <span class="p">(</span><span class="nf">defroutes</span> <span class="nv">routes</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">GET</span> <span class="s">&quot;/&quot;</span> <span class="p">[]</span> <span class="s">&quot;&lt;h1&gt;Hello World&lt;/h1&gt;&quot;</span><span class="p">)</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">route/not-found</span> <span class="s">&quot;&lt;h1&gt;Page not found&lt;/h1&gt;&quot;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>   <span class="p">(</span><span class="k">def </span><span class="nv">app</span>
</span><span class='line'>       <span class="p">(</span><span class="nb">-&gt; </span><span class="nv">routes</span>
</span><span class='line'>       <span class="p">(</span><span class="nf">m/request-tracer</span> <span class="p">{</span><span class="ss">:scribe</span> <span class="p">{</span><span class="ss">:host</span> <span class="s">&quot;localhost&quot;</span> <span class="ss">:port</span> <span class="mi">9410</span><span class="p">}</span>
</span><span class='line'>                          <span class="ss">:service</span> <span class="s">&quot;WebServer&quot;</span><span class="p">})))</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Zipkin Web Analyzer</em>
<img class="center" src="http://guilespi.github.com/images/blog/clj-zipkin-sample.png" width="580" height="680" title="'Zipkin Sample'" ></p>

<p>It&#8217;s far from perfect, undocumented and incomplete, but at least it&#8217;s free :)</p>

<p>Give it a try and let me know what you think.</p>

<p><em>I&#8217;m <a href="http://www.twitter.com/guilespi">guilespi</a> at Twitter</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Real Life Clojure Application]]></title>
    <link href="http://guilespi.github.com/blog/2013/04/20/real-life-clojure-application/"/>
    <updated>2013-04-20T17:56:00-03:00</updated>
    <id>http://guilespi.github.com/blog/2013/04/20/real-life-clojure-application</id>
    <content type="html"><![CDATA[<p>When a language is going through its maturity process, there&#8217;s always the need for sample code and applications to look at, design patterns,
coding guidelines, best libraries, you name it, you usually get those looking at the source code of others.</p>

<p>That is what really builds community, having a common language, besides the <em>language</em>.</p>

<p>Clojure&#8217;s been going through this phenomenon for the last years, as you see <a href="http://stackoverflow.com/questions/329221/medium-size-clojure-sample-application">in this question</a> from 2008 and <a href="http://stackoverflow.com/questions/3628958/good-clojure-code-examples">this question</a> still being answered in 2012.</p>

<p>This year I made a real life full application in Clojure so I&#8217;ve spent some time deciding on many strategies,
where to put which code, how to test, best libraries to use and what not.</p>

<p>So I decided to put <a href="https://github.com/guilespi/notify-me">the source code</a> online, not only because I think it may help someone,
but hopefully somebody will come up and help me improve what it&#8217;s done in one way or another, it&#8217;s certainly <em>far</em> from perfect.</p>

<p>In case you wonder, it&#8217;s an application for automatic call and sms dispatching.</p>

<p><img class="center" src="http://guilespi.github.com/images/blog/notifyme.png" width="480" height="580" title="'Notify Me Blaster Application'" ></p>

<p>Among other things, you&#8217;ll find inside:</p>

<ul>
<li>Web development using <a href="https://github.com/ring-clojure/ring">ring</a>, <a href="https://github.com/weavejester/compojure">compojure</a> and <a href="https://github.com/weavejester/hiccup">hiccup</a>.</li>
<li>Client side <em>almost</em> entirely done in <a href="https://github.com/clojure/clojurescript">clojurescript</a>.</li>
<li>Authentication and authorization using <a href="https://github.com/cemerick/friend">friend</a>.</li>
<li>Database access using both <a href="https://github.com/clojure/java.jdbc">jdbc</a> and <a href="https://github.com/korma/Korma">korma</a>.</li>
<li>Async jobs using <a href="https://github.com/michaelklishin/quartzite">quartz</a> for call and sms dispatching.</li>
<li>Unit tests using <a href="https://github.com/marick/Midje">midje</a>.</li>
<li>Chart drawing using <a href="https://github.com/liebke/incanter">incanter</a>.</li>
<li>Asterisk telephony integration using my own <a href="https://github.com/guilespi/clj-asterisk">clj-asterisk</a> bindings.</li>
<li>Deploy configuration using <a href="https://github.com/pallet">pallet</a> <em>(not yet finished)</em>.</li>
</ul>


<p><em>If you like it say hi! I&#8217;m <a href="http://www.twitter.com/guilespi">guilespi</a></em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Computational Investment QSTK Framework from Python to Clojure]]></title>
    <link href="http://guilespi.github.com/blog/2012/10/29/computational-investment-qstk-framework-from-python-to-clojure/"/>
    <updated>2012-10-29T01:07:00-02:00</updated>
    <id>http://guilespi.github.com/blog/2012/10/29/computational-investment-qstk-framework-from-python-to-clojure</id>
    <content type="html"><![CDATA[<p>Last week started the course on <a href="https://class.coursera.org/compinvesting1-2012-001/class/index">Computational Investing</a> from Coursera and I&#8217;ve been taking a look.</p>

<p>What caught my attention is the libraries used for portfolio construction and management, <a href="http://wiki.quantsoftware.org/index.php?title=QuantSoftware_ToolKit">QSTK</a>, an opensource python framework, based on numpy, scipy, matplotlib, pandas, etc.</p>

<p>Looking at the <a href="http://wiki.quantsoftware.org/index.php?title=QSTK_Tutorial_1">first tutorial</a>&#8217;s <a href="https://gist.github.com/3971007">source code</a>, saw it as an opportunity to migrate the tutorials and libraries to Clojure and get to play a little with <a href="http://incanter.org/">Incanter</a>.</p>

<p>I&#8217;m going to highlight what I&#8217;ve found interesting when migrating the tutorials. I&#8217;m assuming you have QSTK installed and the QS environment variable is set, since the code depends on that for data reading.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="o">^</span><span class="p">{</span><span class="ss">:dynamic</span> <span class="nv">true</span><span class="p">}</span> <span class="nv">*QS*</span> <span class="p">(</span><span class="nb">get </span><span class="p">(</span><span class="nf">System/getenv</span><span class="p">)</span> <span class="s">&quot;QS&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>NYSE operation dates</strong></p>

<p>As part of the initialization process the tutorial calls a function <a href="http://www.quantsoftware.org/Docs/html/QSTK.qstkutil.dateutil-pysrc.html#getNYSEdays">getNYSEDays</a>, which retrieves all the days there was trading at the NYSE. Migration is straightforward using incanter&#8217;s read-dataset to read file into memory and then filter the required range.</p>

<div><script src='https://gist.github.com/3970987.js'></script>
<noscript><pre><code>(defn get-NYSE-days
  &quot;Create a set of timestamps between startday and endday
  that correspond to the days there was trading at the NYSE&quot;
  [start-date end-date time-of-day]
  (let [dates-file (str *QS* &quot;/qstkutil/NYSE_dates.txt&quot;)
        NYSE-dates (incanter.io/read-dataset dates-file)
        fmt (formatter &quot;MM/dd/yyyy&quot;)
        dates (incanter.core/$map #(parse fmt %) :col0 NYSE-dates)]
    (set (filter (fn [d] (within? (interval start-date end-date) d))
           (map #(plus % time-of-day) dates)))))
</code></pre></noscript></div>


<p>Pay attention to the <code>time-of-day</code> set at 16 hours, <a href="http://en.wikipedia.org/wiki/List_of_market_opening_times">the time NYSE closes</a>, we&#8217;ll see it again in unexpected places.</p>

<p><strong>Data Access</strong></p>

<p>QSTK provides a helper class called <a href="http://www.quantsoftware.org/Docs/html/QSTK.qstkutil.DataAccess.DataAccess-class.html">DataAccess</a> used for reading and caching stock prices.</p>

<p>As you see here there&#8217;s some data reading happening, we&#8217;re gonna take a look at these functions since we&#8217;ll need to write them from scratch.</p>

<figure class='code'><figcaption><span>Data initialization in python tutorial </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">dataobj</span> <span class="o">=</span> <span class="n">da</span><span class="o">.</span><span class="n">DataAccess</span><span class="p">(</span><span class="s">&#39;Yahoo&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">voldata</span> <span class="o">=</span> <span class="n">dataobj</span><span class="o">.</span><span class="n">get_data</span><span class="p">(</span><span class="n">timestamps</span><span class="p">,</span> <span class="n">symbols</span><span class="p">,</span> <span class="s">&quot;volume&quot;</span><span class="p">,</span><span class="n">verbose</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'><span class="n">close</span> <span class="o">=</span> <span class="n">dataobj</span><span class="o">.</span><span class="n">get_data</span><span class="p">(</span><span class="n">timestamps</span><span class="p">,</span> <span class="n">symbols</span><span class="p">,</span> <span class="s">&quot;close&quot;</span><span class="p">,</span><span class="n">verbose</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'><span class="n">actualclose</span> <span class="o">=</span> <span class="n">dataobj</span><span class="o">.</span><span class="n">get_data</span><span class="p">(</span><span class="n">timestamps</span><span class="p">,</span> <span class="n">symbols</span><span class="p">,</span> <span class="s">&quot;actual_close&quot;</span><span class="p">,</span><span class="n">verbose</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&#8217;re going to separate this in two functions, first reading symbol data from disk using again read-dataset and creating a hash-map indexed by symbol name.</p>

<figure class='code'><figcaption><span>Creating a symbols hash-map of incanter datasets</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='Clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">read-symbols-data</span>
</span><span class='line'>  <span class="s">&quot;Returns a hashmap of symbols/incanter datasets read from QS data directory&quot;</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">source-in</span> <span class="nv">symbols</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">data-dir</span> <span class="p">(</span><span class="nb">str </span><span class="nv">*QS*</span> <span class="s">&quot;/QSData/&quot;</span> <span class="nv">source-in</span> <span class="s">&quot;/&quot;</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">reduce </span><span class="o">#</span><span class="p">(</span><span class="nb">assoc </span><span class="nv">%1</span> <span class="nv">%2</span> <span class="p">(</span><span class="nf">incanter.io/read-dataset</span> <span class="p">(</span><span class="nb">str </span><span class="nv">data-dir</span> <span class="nv">%2</span> <span class="s">&quot;.csv&quot;</span><span class="p">)</span> <span class="ss">:header</span> <span class="nv">true</span><span class="p">))</span> <span class="p">{}</span> <span class="nv">symbols</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then if you take a look at <code>voldata</code> in a python repl, you can see pretty much what it&#8217;s doing</p>

<pre><code>                       AAPL       GLD     GOOG        $SPX       XOM
 2012-05-01 16:00:00  21821400   7414800  2002300  2706893315  13816900
 2012-05-02 16:00:00  15263900   5632300  1611500  2634854740  11108700
 2012-05-03 16:00:00  13948200  13172000  1868000  2673299265   9998600
</code></pre>

<p>It&#8217;s grabbing the specified column <code>volume</code> or <code>close</code> from each symbol dataset, and it&#8217;s creating a new table with the resulting column renamed as the symbol.</p>

<p>All the get_data magic happens inside <a href="http://www.quantsoftware.org/Docs/html/QSTK.qstkutil.DataAccess-pysrc.html#DataAccess.get_data_hardread">get_data_hardread</a>, it&#8217;s an ugly piece of code making a lot of assumptions about column names, and even about market closing time. I guess you can only use this library for markets closing at 16 hours local time.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">timemonth</span> <span class="o">=</span> <span class="nb">int</span><span class="p">((</span><span class="n">timebase</span><span class="o">-</span><span class="n">timeyear</span><span class="o">*</span><span class="mi">10000</span><span class="p">)</span><span class="o">/</span><span class="mi">100</span><span class="p">)</span>
</span><span class='line'><span class="n">timeday</span> <span class="o">=</span> <span class="nb">int</span><span class="p">((</span><span class="n">timebase</span><span class="o">-</span><span class="n">timeyear</span><span class="o">*</span><span class="mi">10000</span><span class="o">-</span><span class="n">timemonth</span><span class="o">*</span><span class="mi">100</span><span class="p">))</span>
</span><span class='line'><span class="n">timehour</span> <span class="o">=</span> <span class="mi">16</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&#8217;ve translated that into these two functions:</p>

<div><script src='https://gist.github.com/3971076.js'></script>
<noscript><pre><code>(defn select-value
  &quot;Given a dataset indexed by date, returns the value corresponding to a specified column
  if existent for a specific date&quot;
  [ds column date]
  (let [row (ds {:Date date})]
    (when-not (nil? row) (incanter.core/$ 0 column row))))

(defn get-data
  &quot;Given a list of `symbols`, its data and a list of specific `timestamps`, builds a matrix(sequence)
  with each column corresponding to a stock and the value extracted using `column` 
  :Date        AAPL    GOOG    WFC
  2012-02-01   54.1    33.1    25.0
  2012-02-02   56.3    33.4    22.9&quot;
  [timestamps symbols column symbols-data time-of-day]
  (let [grouped-data (reduce (fn [m, s] (assoc m (s 0) (incanter.core/$group-by :Date (s 1)))) {} symbols-data)]
    (for [t timestamps]
      (let [unparsed-date (unparse (formatters :year-month-day) t)]
        (reduce #(merge %1 {(%2 0) (select-value (%2 1) column unparsed-date)}) {:Date (to-long t)} grouped-data)))))</code></pre></noscript></div>


<p>In this case Clojure shines, the <a href="https://gist.github.com/3971102">original function</a> is almost 300 lines of code. I&#8217;m missing a couple of checks but it&#8217;s not bad for a rookie, I think.</p>

<p>The helper function <code>select-value</code> is there in order to avoid an exception when trying to find stock data for a non existent date. Also the function returns <code>:Date</code> as a double since it&#8217;s easier to handle later for charting.</p>

<p><strong>Charting</strong></p>

<p>Charting with Incanter is straightforward, there a subtle difference with python since you need to add each series one by one. So what python is doing here charting multiple series at once</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">newtimestamps</span> <span class="o">=</span> <span class="n">close</span><span class="o">.</span><span class="n">index</span>
</span><span class='line'><span class="n">pricedat</span> <span class="o">=</span> <span class="n">close</span><span class="o">.</span><span class="n">values</span> <span class="c"># pull the 2D ndarray out of the pandas object</span>
</span><span class='line'><span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">newtimestamps</span><span class="p">,</span><span class="n">pricedat</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>We need a little function to solve it with Incanter. Each iteration gets reduced into the next with all the series accumulated in one chart.</p>

<figure class='code'><figcaption><span>creates multiple time-series at once</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">multi-series-chart</span>
</span><span class='line'>  <span class="s">&quot;Creates a xy-chart with multiple series extracted from column data</span>
</span><span class='line'><span class="s">  as specified by series parameter&quot;</span>
</span><span class='line'>  <span class="p">[{</span><span class="ss">:keys</span> <span class="p">[</span><span class="nv">series</span> <span class="nv">title</span> <span class="nv">x-label</span> <span class="nv">y-label</span> <span class="nv">data</span><span class="p">]}]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">chart</span> <span class="p">(</span><span class="nf">incanter.charts/time-series-plot</span> <span class="ss">:Date</span> <span class="p">(</span><span class="nb">first </span><span class="nv">series</span><span class="p">)</span>
</span><span class='line'>                                                 <span class="ss">:x-label</span> <span class="nv">x-label</span>
</span><span class='line'>                                                 <span class="ss">:y-label</span> <span class="nv">y-label</span>
</span><span class='line'>                                                 <span class="ss">:title</span> <span class="nv">title</span>
</span><span class='line'>                                                 <span class="ss">:series-label</span> <span class="p">(</span><span class="nb">first </span><span class="nv">series</span><span class="p">)</span>
</span><span class='line'>                                                 <span class="ss">:legend</span> <span class="nv">true</span>
</span><span class='line'>                                                 <span class="ss">:data</span> <span class="nv">data</span><span class="p">)]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">reduce </span><span class="o">#</span><span class="p">(</span><span class="nf">incanter.charts/add-lines</span> <span class="nv">%1</span> <span class="ss">:Date</span> <span class="nv">%2</span> <span class="ss">:series-label</span> <span class="nv">%2</span> <span class="ss">:data</span> <span class="nv">data</span><span class="p">)</span> <span class="nv">chart</span> <span class="p">(</span><span class="nb">rest </span><span class="nv">series</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Data Mangling</strong></p>

<p>Incanter has <em>a lot</em> of built-in functions and helpers to operate on your data, unfortunately I couldn&#8217;t use one of the many options for operating
on a matrix, or even <code>$=</code>, since the data we&#8217;re processing has many <code>nil</code> values inside the dataset for dates the stock didn&#8217;t trade which raises an exception when
treated as a number, which is what to-matrix does, tries to create an array of Doubles.</p>

<p>There&#8217;s one more downside and it&#8217;s we need to keep the <code>:Date</code> column as-is when operating on the dataset, so we need to remove it, operate, and add it later again, what happens to be a beautiful one-liner in python</p>

<figure class='code'><figcaption><span>This attempts a naive normalization dividing each row by the first one. </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'> <span class="n">normdat</span> <span class="o">=</span> <span class="n">pricedat</span><span class="o">/</span><span class="n">pricedat</span><span class="p">[</span><span class="mi">0</span><span class="p">,:]</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Or the daily return function. </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">dailyrets</span> <span class="o">=</span> <span class="p">(</span><span class="n">pricedat</span><span class="p">[</span><span class="mi">1</span><span class="p">:,:]</span><span class="o">/</span><span class="n">pricedat</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="o">-</span><span class="mi">1</span><span class="p">,:])</span> <span class="o">-</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>I ended up writing from scratch the iteration and function applying code.</p>

<div><script src='https://gist.github.com/3971236.js'></script>
<noscript><pre><code>
(defmacro apply-filtered
  &quot;Given two sequences, apply a function to each pair of elements when condition is met
  anaphoras n and m exists for each indexed element

  e.g. (apply-filtered / [1 2 3] [1 0 3] when (&gt; m 0)) =&gt; (1 nil 1)
  &quot;
  [op a b &amp; condition]
  `(for [x# (range (count ~a))]
    (let [n# (nth ~a x#)
          m# (nth ~b x#)]
      (when (~(second condition) n# m#)
        (~op n# m#)))))

(defmacro apply-rows
  &quot;Apply an operation to each row of the dataset excluding :Date column
   A start row and a condition must be given

  .e.g Divide each row by vector [1 0 3] starting from 0 validating divide by zero
    (apply-rows ds (/ [1 2 3]) 0 (fn [n m] (&gt; m 0))&quot;
  [data operation start cond]
  `(let [raw-data# (incanter.core/$ :all [:not :Date] ~data)
        raw-cols# (incanter.core/col-names raw-data#)
        dates# (incanter.core/$ :all :Date ~data)] 
       (incanter.core/col-names
        (incanter.core/conj-cols
         (for [~&#39;i (range ~start (incanter.core/nrow raw-data#))]
           (apply-filtered
                      ~(first operation)
                      (vec (incanter.core/$ ~&#39;i [:not :Date] raw-data#))
                      ~(second operation)
                      :when ~cond))
         dates#) (conj raw-cols# :Date))))
</code></pre></noscript></div>


<p>Maybe there&#8217;s an easier way but I couldn&#8217;t think of it, if you know a better way please drop me a line!</p>

<p>Now normalization and daily-returns are at least manageable.</p>

<figure class='code'><figcaption><span>Normalization and Daily Returns</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">normalize</span>
</span><span class='line'>  <span class="s">&quot;Divide each row in a dataset by the first row&quot;</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">ds</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">first-row</span> <span class="p">(</span><span class="nf">vec</span> <span class="p">(</span><span class="nf">incanter.core/$</span> <span class="mi">0</span> <span class="p">[</span><span class="ss">:not</span> <span class="ss">:Date</span><span class="p">]</span> <span class="nv">ds</span><span class="p">))]</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">apply-rows</span> <span class="nv">ds</span> <span class="p">(</span><span class="nb">/ </span><span class="nv">first-row</span><span class="p">)</span> <span class="mi">0</span> <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">n</span> <span class="nv">m</span><span class="p">]</span> <span class="p">(</span><span class="nb">and </span><span class="p">(</span><span class="nb">not-any? nil? </span><span class="p">[</span><span class="nv">n</span> <span class="nv">m</span><span class="p">])</span> <span class="p">(</span><span class="nb">&gt; </span><span class="nv">m</span> <span class="mi">0</span><span class="p">))))))</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">daily-rets</span>
</span><span class='line'>  <span class="s">&quot;Daily returns&quot;</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">data</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">apply-rows</span> <span class="nv">data</span>
</span><span class='line'>            <span class="p">((</span><span class="k">fn </span><span class="p">[</span><span class="nv">n</span> <span class="nv">m</span><span class="p">]</span> <span class="p">(</span><span class="nb">- </span><span class="p">(</span><span class="nb">/ </span><span class="nv">n</span> <span class="nv">m</span><span class="p">)</span> <span class="mi">1</span><span class="p">))</span> <span class="p">(</span><span class="nf">vec</span> <span class="p">(</span><span class="nf">incanter.core/$</span> <span class="p">(</span><span class="nb">- </span><span class="nv">i</span> <span class="mi">1</span><span class="p">)</span> <span class="p">[</span><span class="ss">:not</span> <span class="ss">:Date</span><span class="p">]</span> <span class="nv">data</span><span class="p">)))</span>
</span><span class='line'>            <span class="mi">1</span>
</span><span class='line'>            <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">n</span> <span class="nv">m</span><span class="p">]</span> <span class="p">(</span><span class="nb">and </span><span class="p">(</span><span class="nb">not-any? nil? </span><span class="p">[</span><span class="nv">n</span> <span class="nv">m</span><span class="p">])</span> <span class="p">(</span><span class="nb">&gt; </span><span class="nv">m</span> <span class="mi">0</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Having the helper functions done, running of the tutorial is almost declarative.</p>

<div><script src='https://gist.github.com/3971246.js'></script>
<noscript><pre><code>(defn run
  []
  (let [symbols [&quot;AAPL&quot;,&quot;GLD&quot;,&quot;GOOG&quot;,&quot;$SPX&quot;,&quot;XOM&quot;]
        start-day (date-time 2012 1 1)
        end-day (date-time 2012 12 31)
        time-of-day (hours 16)
        timestamps (get-NYSE-days start-day end-day time-of-day)
        symbols-data (read-symbols-data &quot;Yahoo&quot; symbols)
        adj-close-data (incanter.core/to-dataset
                        (get-data timestamps symbols (keyword &quot;Adj Close&quot;) symbols-data time-of-day))]
    (do
      ;;first chart of the tutorial
      (incanter.core/view (multi-series-chart {:series symbols
                                               :x-label &quot;Date&quot;
                                               :y-label &quot;Adjusted Close&quot;
                                               :title &quot;Adjusted close data&quot;
                                               :data adj-close-data}))
      ;;second chart of the tutorial
      (incanter.core/view (multi-series-chart {:series symbols
                                               :x-label &quot;Date&quot;
                                               :y-label &quot;Adjusted Close&quot;
                                               :title &quot;Normalized close data&quot;
                                               :data (normalize adj-close-data)}))
      ;;daily returns
      (incanter.core/view (multi-series-chart {:series symbols
                                               :x-label &quot;Date&quot;
                                               :y-label &quot;Return&quot;
                                               :title &quot;Daily Returns&quot;
                                               :data (daily-rets adj-close-data)}))
      ;;quotes comparison with scatter plot
      (incanter.core/view (incanter.charts/scatter-plot
                           &quot;AAPL&quot; &quot;GOOG&quot;
                           :x-label &quot;AAPL&quot;
                           :y-label &quot;GOOG&quot;
                           :legend true
                           :data (normalize adj-close-data)
                           )))))</code></pre></noscript></div>


<p>If you wanna take a look at the whole thing together here&#8217;s the <a href="https://gist.github.com/3971253">gist</a>, I may create a repo later.</p>

<p><img class="center" src="http://guilespi.github.com/images/blog/chartincanter.png" width="380" height="480" title="'Incanter charting finance data'" ></p>

<p>Please remember NumPy is way much faster than Clojure since it links <a href="http://www.netlib.org/lapack/">BLAS/Lapack</a> libraries.</p>

<p><em>Follow me on <a href="http://www.twitter.com/guilespi">twitter</a></em></p>
]]></content>
  </entry>
  
</feed>
