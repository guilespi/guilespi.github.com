<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: testing | Interrupted]]></title>
  <link href="http://guilespi.github.com/blog/categories/testing/atom.xml" rel="self"/>
  <link href="http://guilespi.github.com/"/>
  <updated>2014-04-22T10:41:35-03:00</updated>
  <id>http://guilespi.github.com/</id>
  <author>
    <name><![CDATA[Guillermo Winkler]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Neither types nor tests will solve your data coverage problem]]></title>
    <link href="http://guilespi.github.com/blog/2012/11/14/neither-types-nor-tests-will-solve-your-data-coverage-problem/"/>
    <updated>2012-11-14T22:24:00-02:00</updated>
    <id>http://guilespi.github.com/blog/2012/11/14/neither-types-nor-tests-will-solve-your-data-coverage-problem</id>
    <content type="html"><![CDATA[<p>I just watched the Strangeloop talk titled <a href="http://www.infoq.com/presentations/Types-Tests">Types vs. Tests: An Epic Battle</a> from Amanda Laucher and Paul Snively.
As Amanda says it's a discussion many of us have had in the past, I used to talk about it with <a href="http://www.twitter.com/fedesilva">fedesilva</a>,
hardcore Scala advocate, you know what I mean?</p>

<p>For me, I think types and tests are two sides of the same coin, because neither strategy
for proving correctness is computable.</p>

<p>Bear with me.</p>

<p>The purpose of having types or having tests, it's to prove your program to be correct before <a href="http://blog.guillermowinkler.com/blog/2012/11/07/whats-a-bug-worth/">your bugs reach your customers</a>,
one strategy tries to prove it <em>at compile time</em> and the other <em>after compile time</em>. But what it really means your program to be <em>correct</em>?</p>

<p>Let's go for ride on <a href="http://en.wikipedia.org/wiki/Computability_theory">Computability Theory</a>.</p>

<p><strong>Functions and programs</strong></p>

<p>According to the definition a function <code>f</code> is computable if a program <code>P</code> exists which can calculate the function given unlimited amounts of time and storage.</p>

<pre><code>f:N→N is computable ↔ ∃ a program P which computes the function.
</code></pre>

<p>Also we must define when a program <code>P</code> converges for input <code>n</code>.</p>

<pre><code>Program P with input n converges if ∃ m ∈ N / &lt;Q,n&gt; = m , it's written &lt;Q,n&gt;↓
</code></pre>

<p>In computer theory there are well known functions to be non computable, two of them are:</p>

<pre><code>Θ(n) = 1  if &lt;Ix(n), n&gt;↓
       0  if &lt;Ix(n), n&gt;↑
</code></pre>

<p>Which says that the function <code>Θ</code> is equal to 1 if the program of index <code>n</code> converges on input <code>n</code> and 0 if the program of index <code>n</code> diverges on input <code>n</code>.</p>

<p>There's another very famous function which has been proved to be non computable.</p>

<pre><code>stop(p, n) = 1 if &lt;Ix(p), n&gt;↓
             0 if &lt;Ix(p), n&gt;↑
</code></pre>

<p>Which pretty much says that given a description of an arbitrary computer program, decide whether the program finishes running or continues to run forever.
As you may have guessed, it's the well known <a href="http://en.wikipedia.org/wiki/Halting_problem">Halting Problem</a>, and it's <em>not</em> computable.</p>

<p><strong>How the Halting Problem relates to types and tests</strong></p>

<p>Let's assume our program <code>P</code> we're trying to prove correct, computes the function <code>f:N→N</code>. We can define our program that proves correctness, a program <code>T</code>
that computes the function</p>

<pre><code>ft:N→{0,1} 
</code></pre>

<p>Which is to say, for every input of the domain, our program <code>T</code> decides if the program converges or not. It's starting to sound familiar ain't it?</p>

<p>Let's assume such a program <code>T</code> exists to prove correctness, and we have a macro <code>MT</code> to find such a program given <code>P</code>. We could write the following program <code>Q</code></p>

<p><code>
PROGRAM(x0, x1)
x3=MT(x0)
x4=EVAL_PROG(x3, x1)
RESULT(x4)
</code></p>

<p>What <code>Q</code> does it's having received a program <code>x0</code> and an input <code>x1</code>, first finds the <code>T</code> decider program for the program <code>x0</code>, and then evaluates the program
with the input <code>x1</code>.</p>

<p>So what do we have here?</p>

<pre><code>Q(p, n) = 1 ↔ ft(n) = 1 ↔ &lt;P, n&gt; ↓
</code></pre>

<p>So we have written a program which computes the <code>stop</code> function, which is absurd. It means we cannot have a program that decides on the computability of
a program.</p>

<p><strong>Show me the code</strong></p>

<p>In practice, it means that if you have this program</p>

<p>``` c
int f(int x) {
   while (x > 0) {</p>

<pre><code> x--;
</code></pre>

<p>   }
   return 0;
}
<code>``
This program doesn't stop for</code>x &lt; 0`, and according to theory, there's no program you can write to find out about it.</p>

<p>There are also a few other funny cases regarding the domain of your functions, such as</p>

<p><code>c
int f(int x) {
   return 1 / (x - 3);
}
</code>
This function fails miserably if <code>x = 3</code>. Just think about it when your functions have a more complex domain.</p>

<p><strong>How to improve your tests for correctness</strong></p>

<p>Most people I see are worried about having 100% <em>code coverage</em>, but it's not that usual to see people worried about <em>data coverage</em>.</p>

<p>As seen in the previous example if you forget to test for <code>x = 3</code> you may have 100% code coverage but your program will blow up anyway.</p>

<p>Regarding types, I know <a href="http://en.wikipedia.org/wiki/Dependent_type">Dependent Types</a> exists, but it's the other side of the same coin, you have to provide a constructive
proof that the type is <em>inhabited</em>. So if you don't define your type considering the special cases of your function domain, no one is coming
up to save your ass.</p>

<p>But when thinking about correctness you should be thinking about your function domain.</p>

<p><strong>Conclusion</strong></p>

<p>Both tests and types are useful ways to validate your program is correct, but not perfect. Even the discussion is meaningless, because it's just a matter
of taste whether you like to specify your correctness rules in types or tests, but it's something you will keep doing as far as I can tell.</p>

<p>As Rich Hickey <a href="https://twitter.com/richhickey/status/116490495500357633">said</a>, both tests and types are like guard rails, and you must know the cliff is there in order to decide building them.</p>

<p><strong>Update:</strong>
Many people wrote to me as if I'm saying you can't prove a program to be correct, that was not what I've tried to say.
It was that you can't have a system that can prove programs to be correct without specifying the rules yourself.
That is, it was a case against <code>Q</code> not against <code>T</code>.</p>

<p><em>And hey! you follow me on <a href="http://www.twitter.com/guilespi">twitter</a>!</em></p>
]]></content>
  </entry>
  
</feed>
