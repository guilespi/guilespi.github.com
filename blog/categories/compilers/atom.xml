<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Compilers | Interrupted]]></title>
  <link href="http://guilespi.github.com/blog/categories/compilers/atom.xml" rel="self"/>
  <link href="http://guilespi.github.com/"/>
  <updated>2014-04-28T00:02:05-03:00</updated>
  <id>http://guilespi.github.com/</id>
  <author>
    <name><![CDATA[Guillermo Winkler]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Decompiling Clojure II, The Compiler]]></title>
    <link href="http://guilespi.github.com/blog/2014/04/21/decompiling-clojure-ii/"/>
    <updated>2014-04-21T01:03:00-03:00</updated>
    <id>http://guilespi.github.com/blog/2014/04/21/decompiling-clojure-ii</id>
    <content type="html"><![CDATA[<p>This is the second post in the Decompiling Clojure series, <a href="http://blog.guillermowinkler.com/blog/2014/04/13/decompiling-clojure-i/">in the first post</a> I showed what Clojure looks like in bytecode.</p>

<p>For this entry, I'll do a compiler overview, the idea is to understand why and how does Clojure looks like that.</p>

<p>For other decompilation scenarios you don't usually have the advantage of looking at the compiler internals to guide your decompiling algorithms, so we'll take our chance to peek at the compiler now.</p>

<p>We will visit some compiler source code, so be warned, there's Java ahead.</p>

<h2>It's Java</h2>

<p>Well, yes, the Clojure compiler targeting the JVM is written in Java, <a href="https://github.com/Bronsa/CinC">there is an ongoing effort</a> to have a Clojure-in-Clojure compiler, but the original compiler is nowhere near of being replaced.</p>

<p>The source code <a href="https://github.com/clojure/clojure">is hosted on GitHub</a>, but the development process is <a href="http://dev.clojure.org/display/community/JIRA+workflow">a little bit more convoluted</a>, which means you don't just send pull requests for it, <a href="https://groups.google.com/d/msg/clojure/0gwjKtatf-0/dOMECoHPlM4J">it was asked for many times</a> and I don't think it's about to change, so if you wanna contribute, <a href="http://clojure.org/contributing">just sign the contributors agreement</a> and follow the rules.</p>

<h2>The CinC Alternative</h2>

<p>The Clojure-in-Clojure alternative is not only different because it's written in Clojure, but because it's built with extensibility and modularization in mind.</p>

<p>In the original Clojure compiler you don't have a chance to extend, modify or use, many of the data produced by the compilation process.</p>

<p>For instance the <a href="https://github.com/clojure/core.typed">Typed Clojure</a> project, which adds <a href="http://wphomes.soic.indiana.edu/jsiek/what-is-gradual-typing/">gradual typing</a> to Clojure, <a href="http://dev.clojure.org/display/design/Provide+friendly+interface+to+Clojure's+analyzer,+independently+callable+a+la+carte">needed a friendlier interface</a> to the compiler analyzer phase. It was first developed by Ambrose Bonnair-Sergeant <a href="https://github.com/frenchy64/analyze">as an interface to the Compiler analyzer</a> <del>and then moved to be part of the <a href="https://github.com/clojure/tools.analyzer">CinC analyzer</a></del>.</p>

<p>The CinC alternative is modularized in -at least three- different parts.</p>

<ul>
<li><a href="https://github.com/clojure/tools.analyzer">The analyzer</a>, meant to be shared among all Clojure compilers (as Clojurescript)</li>
<li><a href="https://github.com/clojure/tools.analyzer.jvm">The JVM analyzer</a>, contains specific compiler passes for the JVM (for instance locals clearing is done here)</li>
<li><a href="https://github.com/clojure/tools.emitter.jvm">The bytecode emitter</a>, actually emits JVM bytecode.</li>
</ul>


<p>There's <a href="http://www.youtube.com/watch?v=KhRQmT22SSg">a great talk from Timothy Baldridge</a> showing some examples using the CinC analyzer, watch it.</p>

<p><strong>Note</strong> <em>CinC developer <a href="https://github.com/Bronsa">Nicola Mometto</a> <a href="https://twitter.com/Bronsa_/status/458643972555300866">pointed out</a> that the analyzer written by Ambrose and CinC are indeed different projects. Which I should've noticed myself since
the analyzer by Ambrose uses the analyzer from the original Clojure compiler, which is <a href="https://github.com/clojure/jvm.tools.analyzer/blob/master/src/main/clojure/clojure/jvm/tools/analyzer.clj#L843">exposed as a function</a>. Part of my mistake was surely derived from the fact one is called <code>tools.analyzer.jvm</code> and
the other one is called <code>jvm.tools.analyzer</code></em></p>

<h2>Compilation process</h2>

<p>One of supposed advantages of Lisp-like languages is that the concrete syntax is already the abstract syntax. If you've read some of the <a href="http://www.twitter.com/fogus">fogus</a> <a href="http://blog.fogus.me/tag/clj-compilation/">writings about Clojure compilation</a> tough, he has some opinions on that statement:</p>

<p><blockquote><p>This is junk. Actual ASTs are adorned with a boatload of additional information like local binding information, accessible bindings, arity information, and many other useful tidbits.</p><footer><strong>fogus</strong> <cite><a href='http://blog.fogus.me/2012/04/25/the-clojurescript-compilation-pipeline/'>blog.fogus.me/2012/04/25/&hellip;</a></cite></footer></blockquote></p>

<p>And he's right, but there's one more thing, Clojure and Lisp syntax are just serialization formats, mapping to the underlying data structure of the program.</p>

<p>That's why Lisp like languages are easier to parse and unparse, or build tools for them, because the program data structure is accesible to the user and not only to the compiler.</p>

<p>Also that's the reason why macros in Lisp or Clojure are so different than <a href="http://docs.scala-lang.org/overviews/macros/overview.html">macros in Scala</a>, where the pre-processor handles you an AST that has nothing to do with the Scala language itself.</p>

<p>That's the proper definition of <a href="http://en.wikipedia.org/wiki/Homoiconicity">homoiconicity</a> by the way, the syntax is isomorphic with the AST.</p>

<h2>Compiler phases</h2>

<p>In general compilers can be broken up into three pieces</p>

<ol>
<li>Lexer/Parser</li>
<li>Analyzer</li>
<li>Emitter</li>
</ol>


<p>Clojure kind of follows this pattern, so if we're compiling a Clojure program the <em>very</em> high level approach to the compilation pipeline would be:</p>

<ol>
<li>Read file</li>
<li>Read s-expression</li>
<li>Expand macros if present</li>
<li>Analyze</li>
<li>Generate JVM bytecode</li>
</ol>


<p>The first three steps are the <em>Reading</em> phase <a href="http://blog.fogus.me/2012/04/25/the-clojurescript-compilation-pipeline/">from the fogus article</a>.</p>

<p>There is one important thing about these steps:</p>

<p>Bytecode has <strong>no information about macros whatsoever</strong>, emitted bytecode corresponds to what you see with <a href="http://clojuredocs.org/clojure_core/clojure.core/macroexpand">macroexpand</a> calls.
Since macros are expanded before analyzing, you shouldn't expect to find anything about your macro in the compiled bytecode, nada, niet, gone.</p>

<p>Meaning, we shouldn't expect to be able to properly decompile macro'ed stuff either.</p>

<h2>Compile vs. Eval</h2>

<p>As said on the first post, the <code>class</code> file doesn't need to be on disk, and that's better understood if we think about <a href="http://clojuredocs.org/clojure_core/1.2.0/clojure.core/eval">eval</a>.</p>

<p>When you type a command in the <code>REPL</code> it needs to be properly translated to bytecode before the JVM is able to execute it, but it doesn't mean the compiler will save a <code>class</code> file, then load it, and only then execute it.</p>

<p>It will be done on the fly.</p>

<p>We will consider three entry points for the compiler, <code>compile</code>, <code>load</code> and <code>eval</code>.</p>

<p><img class="center" src="/images/blog/compiler-reader.png" width="580" height="380" title="Compiler entry point" alt="Compiler entry points"></p>

<p>The <code>LispReader</code> is responsible for reading forms from an input stream.</p>

<h3>Compile Entry Point</h3>

<p><code>compile</code> is a static function found in the <code>Compiler.java</code> file, member of the <code>Compiler</code> class, and it does generate a <code>class</code> file on disk for each function in the compiled namespace.</p>

<p>For instance it will get called if you do the following in your REPL</p>

<p><code>clojure
(compile 'clojure.core.reducers)
</code></p>

<p>Clojure function just wraps over the Java function doing the actual work with the signature</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>compile</span><a href='https://github.com/clojure/clojure/blob/1.5.x/src/jvm/clojure/lang/Compiler.java#L7162'>Compiler.java </a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">Object</span> <span class="nf">compile</span><span class="o">(</span><span class="n">Reader</span> <span class="n">rdr</span><span class="o">,</span> <span class="n">String</span> <span class="n">sourcePath</span><span class="o">,</span> <span class="n">String</span> <span class="n">sourceName</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">{</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Besides all the preamble, <a href="https://github.com/clojure/clojure/blob/1.5.x/src/jvm/clojure/lang/Compiler.java#L7214-L7221">the core of the function</a> is just a loop which reads and calls the <code>compile1</code> function for each form found in the file.</p>

<p>```java
for(Object r = LispReader.read(pushbackReader, false, EOF, false); r != EOF;</p>

<pre><code>        r = LispReader.read(pushbackReader, false, EOF, false))
{
     compile1(gen, objx, r);
}
</code></pre>

<p>```</p>

<p>As we expect, <a href="https://github.com/clojure/clojure/blob/1.5.x/src/jvm/clojure/lang/Compiler.java#L7138-L7154">the compile1 function does macro expansion</a> before analyzing or emitting anything, if <code>form</code> turns out to be a list it recursively calls itself, which is
the <code>then</code> branch of the if test:</p>

<p>```java
form = macroexpand(form);
if(form instanceof IPersistentCollection &amp;&amp; Util.equals(RT.first(form), DO))
  {</p>

<pre><code>for(ISeq s = RT.next(form); s != null; s = RT.next(s))
{
    compile1(gen, objx, RT.first(s));
}
</code></pre>

<p>  }
else
  {</p>

<pre><code>Expr expr = analyze(C.EVAL, form);
    ....
expr.emit(C.EXPRESSION, objx, gen);
expr.eval();
</code></pre>

<p>  }
```</p>

<p>The <code>analyze</code> function we see on the <code>else</code> branch does the proper <code>s-expr</code> analyzing which emits and evals itself afterwards, more on analyzing ahead.</p>

<h3>Load Entry Point</h3>

<p>The <code>load</code> function gets called any time we do a <code>require</code> for a not pre-compiled namespace.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>load</span><a href='https://github.com/clojure/clojure/blob/1.5.x/src/jvm/clojure/lang/Compiler.java#L7032'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">Object</span> <span class="nf">load</span><span class="o">(</span><span class="n">Reader</span> <span class="n">rdr</span><span class="o">,</span> <span class="n">String</span> <span class="n">sourcePath</span><span class="o">,</span> <span class="n">String</span> <span class="n">sourceName</span><span class="o">)</span> <span class="o">{</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>For instance, say we do a require for the <code>clojure.core.reducers</code> namespace:</p>

<p><code>clojure
(require '[clojure.core.reducers :as r])
</code></p>

<p>The <code>clj</code> file will be read as a stream in the <code>loadResourceScript</code> function and passed as the first <code>rdr</code> parameter of the <code>load</code> function.</p>

<p>You see the <code>load</code> function has a pretty similar read form and eval loop as the one we saw in the compile function.</p>

<p><code>java
for(Object r = LispReader.read(pushbackReader, false, EOF, false); r != EOF;
r = LispReader.read(pushbackReader, false, EOF, false))
{
  ret = eval(r,false);
}
</code></p>

<p>Instead of calling <code>compile1</code> calling <code>eval</code>, which is our next entry point.</p>

<h3>Eval Entry Point</h3>

<p><code>eval</code> is the <code>e</code> in REPL, anything to be dynamically evaluated goes through the <code>eval</code> function.</p>

<p>For instance if you type <code>(+ 1 1)</code> on your REPL that expression will be parsed, analyzed and evaluated starting on the <code>eval</code> function.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>eval</span><a href='https://github.com/clojure/clojure/blob/1.5.x/src/jvm/clojure/lang/Compiler.java#L6585'>Compiler.java  </a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">Object</span> <span class="nf">eval</span><span class="o">(</span><span class="n">Object</span> <span class="n">form</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">freshLoader</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>As you see eval receives a <code>form</code> by parameter, since knows nothing about files nor namespaces.</p>

<p><code>eval</code> is just straightforward analyzing of the form, and there's not a emit here. This is the <em>simplified</em> version of the function:</p>

<p><code>java
form = macroexpand(form);
Expr expr = analyze(C.EVAL, form);
return expr.eval();
</code></p>

<h2>The reader</h2>

<p>Languages with more complicated syntaxes separate the Lexer and Parser into two different pieces, like most Lisps, Clojure combines these two into just a <code>Reader</code>.</p>

<p>The reader is pretty much self contained in <code>LispReader.java</code> and its main responsibility is given a stream, return the properly <em>tokenized</em> s-expressions.</p>

<p>The reader dispatches reading to specialized functions and classes when a particular token is found, for instance <code>(</code> dispatches to <code>ListReader</code> class, digits dispatch to the <code>readNumber</code> function and so on.</p>

<p>Much of the list and vector reading classes(<code>VectorReader</code>, <code>MapReader</code>, <code>ListReader</code>, etc) rely on the more generic <code>readDelimitedList</code> function which receives the particular list separator as parameter.</p>

<p>```java Reader classes for each special character in LispReader</p>

<pre><code>macros['"'] = new StringReader();
macros[';'] = new CommentReader();
macros['\''] = new WrappingReader(QUOTE);
macros['@'] = new WrappingReader(DEREF);//new DerefReader();
macros['^'] = new MetaReader();
macros['`'] = new SyntaxQuoteReader();
macros['~'] = new UnquoteReader();
macros['('] = new ListReader();
macros[')'] = new UnmatchedDelimiterReader();
macros['['] = new VectorReader();
macros[']'] = new UnmatchedDelimiterReader();
macros['{'] = new MapReader();
macros['}'] = new UnmatchedDelimiterReader();
</code></pre>

<p>//  macros['|'] = new ArgVectorReader();</p>

<pre><code>macros['\\'] = new CharacterReader();
macros['%'] = new ArgReader();
macros['#'] = new DispatchReader();
</code></pre>

<p>```
This is important because the reader is responsible for reading line and column number information, and establishing a relationship between tokens read and locations in the file.</p>

<p>One of the main drawbacks of the reader used by the compiler is that much of the line and column number information is lost, that's one of the reasons <a href="http://blog.guillermowinkler.com/blog/2014/04/13/decompiling-clojure-i/">we saw in our earlier post</a> that for a 7 line function only one line was properly mapped, interestingly, the line corresponding to the outter s-expression.</p>

<p>We will have to modify this reader if we want proper debugging information for our debugger.</p>

<h2>The analyzer</h2>

<p>The analyzer is the part of the compiler that translates your <code>s-expressions</code> into proper things to be emitted.</p>

<p>We're already familiar with the REPL, in the <code>eval</code> function <code>analyze</code> and <code>emit</code> are combined in a single step, but internally there's a two step process.</p>

<p>First, our parsed but meaningless code needs to be translated into meaningful expressions.</p>

<p>In the case of the Clojure compiler all expressions implement the <code>Expr</code> interface:</p>

<p>```java
interface Expr{</p>

<pre><code>Object eval() ;
void emit(C context, ObjExpr objx, GeneratorAdapter gen);
boolean hasJavaClass() ;
Class getJavaClass() ;
</code></pre>

<p>}
<code>``
Much of the [Clojure special forms][24] are handled here,</code>IfExpr<code>,</code>LetExpr<code>,</code>LetFnExpr<code>,</code>RecurExpr<code>,</code>FnExpr<code>,</code>DefExpr<code>,</code>CaseExpr`, you get the idea.</p>

<p>Those are nested classes inside the Compiler class, and for you visualize how many of those special cases exist inside the compiler, I took this picture for you:</p>

<p><img class="center" src="/images/blog/analyze-expr.png" width="380" height="280" title="Analyzer" alt="Analyzer"></p>

<p>As you would expect for a properly modularized piece of software, each expression knows how to parse itself, eval itself, and emit itself.</p>

<p>The analyze function is a switch on the type of the form to be analyzed, just for you to get a taste:</p>

<p>```java
private static Expr analyze(C context, Object form, String name) {</p>

<p>...</p>

<p>if(fclass == Symbol.class)</p>

<pre><code>return analyzeSymbol((Symbol) form);
</code></pre>

<p>else if(fclass == Keyword.class)</p>

<pre><code>return registerKeyword((Keyword) form);
</code></pre>

<p>else if(form instanceof Number)</p>

<pre><code>return NumberExpr.parse((Number) form);
</code></pre>

<p>else if(fclass == String.class)</p>

<pre><code>return new StringExpr(((String) form).intern());
</code></pre>

<p>...
```</p>

<p>And there's special handling for the special forms which are keyed by Symbol on the same file.</p>

<p>```java
IPersistentMap specials = PersistentHashMap.create(</p>

<pre><code>    DEF, new DefExpr.Parser(),
    LOOP, new LetExpr.Parser(),
    RECUR, new RecurExpr.Parser(),
    IF, new IfExpr.Parser(),
    CASE, new CaseExpr.Parser(),
    LET, new LetExpr.Parser(),
    LETFN, new LetFnExpr.Parser(),
    DO, new BodyExpr.Parser(),
    FN, null,
    QUOTE, new ConstantExpr.Parser(),
    THE_VAR, new TheVarExpr.Parser(),
    IMPORT, new ImportExpr.Parser(),
    DOT, new HostExpr.Parser(),
    ASSIGN, new AssignExpr.Parser(),
    DEFTYPE, new NewInstanceExpr.DeftypeParser(),
    REIFY, new NewInstanceExpr.ReifyParser(),
</code></pre>

<p>```</p>

<p>Analyze <em>will</em> return a parsed <code>Expr</code>, which is now a part of your program represented in the internal data structures of the compiler.</p>

<h2>The bytecode generator</h2>

<p>As said before it uses <a href="http://asm.ow2.org/">ASM</a> so we found the standard code stacking up visitors, annotations, methods, fields, etc.</p>

<p>I won't enter here into specific details about ASM API since it's properly documented somewhere else.</p>

<p>Only notice that no matter if code is eval'ed or not, JVM bytecode <em>will</em> be generated.</p>

<h2>What's next</h2>

<p>One of the reasons I ended up here when I started working on the debugger was to see if by any means, I could <em>add</em> better line number references to the
current Clojure compiler.</p>

<p>As said before and as we saw here, the Java Clojure Compiler is not exactly built for extensibility.</p>

<p>The option I had left, was to modify the line numbers and other debugging information at runtime, and that's what I will show you on the next post.</p>

<p>I will properly synchronize Clojure source code with JVM Bytecode, meaning I will synchronize code trees, that way I will not only add proper line references, but I will know
which bytecode corresponds with which <code>s-expression</code> in your source.</p>

<p>Doing Clojure I usually end up with lines of code looking like this:</p>

<p><code>clojure
(map (comp first rest (partial filter identity)) (split-line line separator))
</code></p>

<p>What use do I have for a <em>line base debugger</em> with that code??</p>

<p>I want an <strong>s-expression based debugger</strong>, don't you?</p>

<p>One more reason we have to envy <a href="http://racket-lang.org/">Dr Racket</a>, whose debugger already knows about them.</p>

<p><img class="center" src="/images/blog/racket-debug.png" width="580" height="480" title="Racket Debugger" alt="Racket Debugger"></p>

<p>Stay tuned to see it working on the JVM.</p>

<p>Meanwhile, <a href="http://www.twitter.com/guilespi">I'm guilespi</a> on Twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Decompiling Clojure I]]></title>
    <link href="http://guilespi.github.com/blog/2014/04/13/decompiling-clojure-i/"/>
    <updated>2014-04-13T17:19:00-03:00</updated>
    <id>http://guilespi.github.com/blog/2014/04/13/decompiling-clojure-i</id>
    <content type="html"><![CDATA[<p>This is the first in a series of articles about decompiling Clojure, that is, going from JVM bytecode created by the Clojure compiler, to some kind of higher level language, not necessarily Clojure.</p>

<p>This article was written in the scope of a larger project, building a better Clojure debugger, which I'll probably blog about in the future.</p>

<p>These articles are going to build form the ground up, so you may skip forward if you find some of the stuff obvious.</p>

<h1>Clojure targets the JVM</h1>

<p>To be more precise, there is a <a href="https://github.com/clojure/clojure">Clojure compiler targeting the JVM</a>, there's also one <a href="https://github.com/clojure/clojurescript">targeting Javascript</a>, one for <a href="https://github.com/richhickey/clojure-clr">the CLR</a> and there are some less known projects <a href="https://github.com/raph-amiard/clojurescript-lua">targeting lua</a> or <a href="https://github.com/schani/clojurec">even C</a>.</p>

<p>But the official <a href="http://clojure.com/">clojure core</a> efforts are mainly on the JVM, which stands for <em>Java Virtual Machine</em>.</p>

<p>That means when you write some clojure code:</p>

<p>```clojure
(ns hello-world)</p>

<p>(println "Hello World")</p>

<p>```
You won't get a native binary, for instance a x86 <a href="http://msdn.microsoft.com/en-us/magazine/cc301805.aspx">PE</a> or <a href="http://www.skyfree.org/linux/references/ELF_Format.pdf">ELF</a> file, although it's entirely possible to write a compiler to do it.</p>

<p>When you target a particular runtime though, you usually get a different set of functions to interact with the host, there's a lot of language primitives just to deal with <a href="http://clojure.org/java_interop">Java inter operation</a> which do not
migrate easily to other runtimes or virtual machines.</p>

<h1>The JVM is about Java, or is it?</h1>

<p>This doesn't mean that the JVM can <em>only</em> run programs written in Java.</p>

<p>In fact, Clojure doesn't use Java as an intermediate language before compiling, the Clojure compiler for the JVM generates <a href="http://docs.oracle.com/javase/specs/jvms/se7/html/jvms-6.html">JVM bytecode</a> directly <a href="http://asm.ow2.org/">using the ASM library</a>.</p>

<p>So, what does it mean the JVM is about Java if you can compile directly to bytecode without a mandatory visit to <a href="http://steve-yegge.blogspot.com/2006/03/execution-in-kingdom-of-nouns.html">the kingdom of nouns</a>?</p>

<p>Besides its name, the JVM was designed by James Gosling in 1992 to support the <a href="http://docs.oracle.com/javase/specs/jvms/se5.0/html/Preface.doc.html">Oak Programming Language</a>, before evolving into its current form.</p>

<p>Its main responsibility is to achieve independence from hardware and operating system, and like a real machine, it has an instruction set and manipulates memory at runtime, and the truth is the JVM knows nothing about the Java Programming Language, it only knows of a particularly binary format, <a href="http://docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html">the class file format</a>, which contains bytecode and other information.</p>

<p>So, any programming language with features that can be expressed in terms of a valid class file, can by hosted on the JVM.</p>

<p>But the truth is that the class file format, maintains a lot of resemblance with concepts appearing in Java, or any other OO programming language as a matter of fact, to name a few:</p>

<ul>
<li>A <code>class</code> file corresponds to a Class</li>
<li>A <code>class</code> file has members</li>
<li>A <code>class</code> file has methods</li>
<li>Methods of the <code>class</code> file can be static or instance methods</li>
<li>There are primitive types and reference types, that can be stored in variables</li>
<li>Exceptions are an instance or subclass of <code>Throwable</code></li>
<li>etc</li>
</ul>


<p>So, we can say the JVM is <strong>not</strong> agnostic regarding the concepts supported by the language, as <a href="http://en.wikipedia.org/wiki/Lisp_Machines">the LISP machines</a> were not agnostic either.</p>

<h1>Clojure compiles to bytecode</h1>

<p>So we have a language like Clojure, with many concepts not easily mapped to the JVM spec, but that it was mapped none the less, how?</p>

<h2>Namespaces do not exist</h2>

<p>Maybe you think Clojure namespaces correspond to a <strong>class</strong>, and each method in the namespace is mapped to a method in the class.</p>

<p>Well, that is not the case.</p>

<p>Namespaces <a href="http://www.infoq.com/presentations/What-Sucks-about-Clojure-and-Why-You-ll-Love-It-Anyway">were criticized before</a> for being tough, and the truth is they're used for proper modularity,
but do not map to an entity in the JVM. They're equivalent to java packages or modules in other languages.</p>

<h2>Each function is a class</h2>

<p>Each function in your namespace will get compiled to a complete different class. That's something you can easily confirm listing the files under <code>target/classes</code> in a leiningen project directory.</p>

<p>```
git:(master) ✗ ls target/classes/</p>

<p>config$fn<strong>292.class                                             <br/>
routes</strong>init.class
config$loading<strong>4910</strong>auto<strong>.class                               <br/>
config$read_environment$fn</strong>300.class                           <br/>
config$read_environment.class                                    <br/>
config$read_properties$iter<strong>304</strong>308$fn<strong>309$fn</strong>310.class  <br/>
server  <br/>
server$<em>main.class
server$</em>main$fn<strong>4006.class
server$fn</strong>3939.class
```</p>

<p>You will find a <code>.class</code> file for each function you have defined, <code>namespace$function.class</code> being the standard syntax.</p>

<h2>Each anonymous function is also a class</h2>

<p>As you saw in the previous listing, there are many functions with numbers like <code>config$fn__292.class</code>.</p>

<p>Those correspond to anonymous functions that get their own class when compiled, so if you have this code:</p>

<p><code>clojure
(map #(+ 34 %) (range 10))
</code>
You should expect a <code>.class</code> file for the anonymous function <code>#(+ 34 %)</code>.</p>

<h2><em>class</em> files don't need to be on disk</h2>

<p>Many times you'll find the <code>class</code> files on disk, but it doesn't have to be that way.</p>

<p>In many circumstances we're going to be modifying the <code>class</code> structure on runtime, or creating new <code>class</code> structures to be run, entirely on memory. Even the compiler can <code>eval</code> some code
compiling to memory without creating a <code>class</code> file on disk.</p>

<h1>What does bytecode look like?</h1>

<p>For the first example, I selected a real simple clojure function</p>

<p>```clojure
(defn test-multi-let
  []
  (let [a 1</p>

<pre><code>    b 2 
    c 3 
    b 4]
9))
</code></pre>

<p>```</p>

<p>To explore the bytecode we will use <code>javap</code>, simple, but does the job:</p>

<p>```
javap -c target/classes/debugee/test\$test_multi_let.class
...
public static {};</p>

<pre><code>Code:
   0: lconst_1
   1: invokestatic  #19                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
   4: putstatic     #21                 // Field const__0:Ljava/lang/Object;
   7: ldc2_w        #22                 // long 2l
  10: invokestatic  #19                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
  13: putstatic     #25                 // Field const__1:Ljava/lang/Object;
  16: ldc2_w        #26                 // long 3l
  19: invokestatic  #19                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
  22: putstatic     #29                 // Field const__2:Ljava/lang/Object;
  25: ldc2_w        #30                 // long 4l
  28: invokestatic  #19                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
  31: putstatic     #33                 // Field const__3:Ljava/lang/Object;
  34: ldc2_w        #34                 // long 9l
  37: invokestatic  #19                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
  40: putstatic     #37                 // Field const__4:Ljava/lang/Object;
  43: return
</code></pre>

<p>```</p>

<p>I've removed some extra information such as variable tables, we're going to be visiting those later.</p>

<p>What you see here are JVM <em>assembly instructions</em>, just a subset of the JVM instruction set, generated by the Clojure compiler when feed with the sample function above.</p>

<p>Before we get into more details, let me show you how that code looks after a basic decompiler pass:</p>

<p><code>
0:a = 1
2:b = 2
6:c = 3
11:b = 4
16:RETURN 9
</code>
Prettier uh?</p>

<p>That is until you decompile this:</p>

<p>```clojure
(defn test-if
  []
  (if (= (inc 1) 2)</p>

<pre><code>8
9))
</code></pre>

<p>```</p>

<p>And get this:</p>

<p><code>
0:IF (2 != clojure.lang.Numbers.inc(1)) GOTO 11 ELSE GOTO 18
11:RETURN 9
18:RETURN 8
</code></p>

<p>Who was the moron that put a <a href="http://groups.engin.umd.umich.edu/CIS/course.des/cis400/basic/basic.html"><strong>BASIC</strong></a> in my Clojure!</p>

<p>Ain't it?</p>

<p>Keep reading... there's more to be seen ahead.</p>

<h1>The operand stack</h1>

<p>I won't dwell into many details about each JVM instruction and how that translates to something resembling Clojure, or Basic for that matter, but there's one thing worth of mention, and that is the operand stack.</p>

<h2>Frames</h2>

<p>A new Frame is created each time a method is invoked and destroyed when the method completes, whether that information is normal or abrupt (throws an uncaught exception), frames are allocated in the JVM stack and have its own array of local variables and its own operand stack.</p>

<p>If you set a breakpoint on your code, each different entry in your thread callstack, is a frame.</p>

<h2>Stack</h2>

<p>The operand stack is a last-in-first-out (LIFO) stack and its empty when the Frame that contains it is created, and the JVM provides instructions for loading constants or variables into the operand stack, and to put values from the operand stack in variables.</p>

<p>The operand stack is usually used to prepare parameters to be passed to methods and to receive method results, <a href="http://markfaction.wordpress.com/2012/07/15/stack-based-vs-register-based-virtual-machine-architecture-and-the-dalvik-vm/">as opposed to using registers to do it</a>.</p>

<p>So you should expect something along these lines:</p>

<p>```
f(a, b, c)</p>

<p>=> compiling to</p>

<p>push a
push b
push c
call f</p>

<p>```</p>

<p>So looking again at the bytecode of the previous function:</p>

<p>```clojure
(defn test-if
  []
  (if (= (inc 1) 2)</p>

<pre><code>8
9))
</code></pre>

<p>```</p>

<p>Here:</p>

<p>```
public java.lang.Object invoke();</p>

<pre><code>Code:
   0: lconst_1
   1: invokestatic  #63                 // Method clojure/lang/Numbers.inc:(J)J
   4: ldc2_w        #42                 // long 2l
   7: lcmp
   8: ifne          18
  11: getstatic     #49                 // Field const__4:Ljava/lang/Object;
  14: goto          21
  17: pop
  18: getstatic     #53                 // Field const__5:Ljava/lang/Object;
  21: areturn
</code></pre>

<p>```</p>

<p>We can make ourselves an interpretation about what's going on...</p>

<p><code>lconst_1</code> is pushing the constant value <code>1</code> into the stack, then calling a static method with <code>invokestatic</code>, as you've already guessed that's the <code>clojure.lang.Numbers.inc(1)</code> we saw on the <em>basic</em> decompiler earlier.</p>

<p>Then <code>ld2_w</code> loads the value <code>2</code> into the stack and <code>lcmp</code> will compare it against the function result, <code>ifne</code> tests for non equality and jumps to line <code>18</code> if values differ.</p>

<p>One thing to consider here is that each entry on the operand stack can hold a value of any JVM type, and those must be operated in ways appropriate to their types, so many operations have a different operation code according to the type they're handling.</p>

<p>So looking at this example from the JVM specification, we see the operations are prefixed with a <code>d</code> since they operate on <code>double</code> values.</p>

<p><code>
Method double doubleLocals(double,double)
0 dload_1 // First argument in local variables 1 and 2
1 dload_3 // Second argument in local variables 3 and 4
2 dadd
3 dreturn
</code></p>

<p>Which as you may have guessed, is adding double values <code>1</code> and <code>3</code>.</p>

<h1>JVM auxiliary information</h1>

<p>The JVM <code>class</code> format has support for some extra information that can be used for debugging purposes, some of which you can get rid from your files if you want.</p>

<p>Among those we find <a href="http://docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html#jvms-4.7.12">the LineNumberTable attribute</a> and the <a href="http://docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html#jvms-4.7.13">the LocalVariableTable attribute</a>, which may be used by debuggers to determine the value of a given local variable during the execution of a method.</p>

<p>According to the jvm spec, the table has the following structure inside the <code>class</code> file format</p>

<p>```
LocalVariableTable_attribute {</p>

<pre><code>   u2 attribute_name_index;
   u4 attribute_length;
   u2 local_variable_table_length;
   {   u2 start_pc;
       u2 length;
       u2 name_index;
       u2 descriptor_index;
       u2 index;
   } local_variable_table[local_variable_table_length];
</code></pre>

<p>   }
```</p>

<p>Basically it says which variable starts at which instruction: <code>start_pc</code> and lasts for how long: <code>length</code>.</p>

<p>If we look at that table for our <code>let</code> example:</p>

<p>```clojure
(defn test-multi-let
  []
  (let [a 1</p>

<pre><code>    b 2 
    c 3 
    b 4]
9))
</code></pre>

<p>```</p>

<p>We see how each variable is referenced against program counter(<code>pc</code>) line numbers (do not get confused with source file line numbers).</p>

<p>```
LocalVariableTable:</p>

<pre><code>  Start  Length  Slot  Name   Signature
         2      17     1     a   J
         6      13     3     b   J
        11       8     5     c   J
        16       3     7     b   J
         0      19     0  this   Ljava/lang/Object;
</code></pre>

<p>```</p>

<p>One interesting thing though, is the <code>LineNumberTable</code></p>

<p>```
  public debugee.test$test_multi_let();</p>

<pre><code>LineNumberTable:
  line 204: 0
</code></pre>

<p>```</p>

<p>Which has only <strong>one</strong> line number reference, even if our function was 7 lines long, obviously that cannot be good for a debugger expecting to step over each line!</p>

<p>Next post I'll blog about the Clojure compiler and how it ends up creating that bytecode, before visiting again the decompiling process.</p>

<p>I'm <a href="http://www.twitter.com/guilespi">guilespi</a> on Twitter, get in touch!</p>
]]></content>
  </entry>
  
</feed>
